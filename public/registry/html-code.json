{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "html-code",
  "title": "Html Code",
  "description": "A minimalistic html code component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "html-code.tsx",
      "content": "\"use client\";\r\nimport React, {\r\n  useState,\r\n  useEffect,\r\n  Children,\r\n  cloneElement,\r\n  isValidElement,\r\n  memo,\r\n  useCallback,\r\n  ReactNode,\r\n  ReactElement,\r\n} from \"react\";\r\nimport {\r\n  Monitor,\r\n  Code as CodeIcon,\r\n  ExternalLink,\r\n  Copy,\r\n  Check,\r\n} from \"lucide-react\";\r\n\r\n// --- Types ---\r\ninterface TabData {\r\n  id: number;\r\n  title: string;\r\n  icon: ReactNode;\r\n  content: ReactElement;\r\n}\r\n\r\ninterface CodeTabsProps {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface PreviewProps {\r\n  title?: string;\r\n  children: ReactNode;\r\n  isActive?: boolean;\r\n  isDarkMode?: boolean;\r\n}\r\n\r\ninterface CodeViewProps {\r\n  title?: string;\r\n  lang?: string;\r\n  children: string;\r\n  isActive?: boolean;\r\n  isDarkMode?: boolean;\r\n}\r\n\r\ninterface HtmlRendererProps {\r\n  htmlContent: string;\r\n}\r\n\r\ninterface HeaderProps {\r\n  tabs: TabData[];\r\n  activeTabId: number;\r\n  onTabClick: (id: number) => void;\r\n}\r\n\r\ninterface TabProps {\r\n  id: number;\r\n  icon: ReactNode;\r\n  text: string;\r\n  active: boolean;\r\n  onClick: (id: number) => void;\r\n}\r\n\r\ninterface CodeEditorProps {\r\n  codeString: string;\r\n  language: string;\r\n  isDarkMode?: boolean;\r\n}\r\n\r\ninterface HtmlCodeTabsProps {\r\n  htmlContent: string;\r\n  title?: string;\r\n  fileName?: string;\r\n  className?: string;\r\n}\r\n\r\n// --- Main Reusable Component ---\r\nexport default function HtmlCodeTabs({\r\n  htmlContent,\r\n  title = \"Demo\",\r\n  fileName = \"index.html\",\r\n  className = \"\",\r\n}: HtmlCodeTabsProps) {\r\n  return (\r\n    <div\r\n      className={`font-sans w-full max-w-none p-2 sm:p-4 lg:p-8 ${className}`}\r\n    >\r\n      <CodeTabs>\r\n        <Preview title={title}>\r\n          <HtmlRenderer htmlContent={htmlContent} />\r\n        </Preview>\r\n        <Code title={fileName} lang=\"html\">\r\n          {htmlContent}\r\n        </Code>\r\n      </CodeTabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst CodeTabs = ({ children }: CodeTabsProps) => {\r\n  const [activeTabId, setActiveTabId] = useState<number>(1);\r\n\r\n  const handleTabClick = useCallback((id: number) => {\r\n    setActiveTabId(id);\r\n  }, []);\r\n\r\n  const tabs = Children.map(children, (child, index) => {\r\n    if (isValidElement(child)) {\r\n      const childProps = child.props as { title?: string };\r\n      return {\r\n        id: index + 1,\r\n        title: childProps.title || (child.type === Preview ? \"Demo\" : \"Code\"),\r\n        icon:\r\n          child.type === Preview ? (\r\n            <Monitor size={14} />\r\n          ) : (\r\n            <CodeIcon size={14} />\r\n          ),\r\n        content: child,\r\n      };\r\n    }\r\n    return null;\r\n  })?.filter(Boolean) as TabData[];\r\n\r\n  return (\r\n    <div\r\n      className=\"w-full max-w-7xl mx-auto rounded-xl shadow-2xl border overflow-hidden bg-white dark:bg-[#161b22] border-gray-200 dark:border-gray-800\"\r\n    >\r\n      <Header\r\n        tabs={tabs}\r\n        activeTabId={activeTabId}\r\n        onTabClick={handleTabClick}\r\n      />\r\n      {/* Responsive height content area */}\r\n      <div className=\"h-[300px] sm:h-[400px] md:h-[500px] lg:h-[600px] overflow-hidden bg-gray-50 dark:bg-[#0d1117]\">\r\n        {tabs.map((tab) =>\r\n          cloneElement(tab.content, {\r\n            key: tab.id,\r\n            isActive: tab.id === activeTabId,\r\n          } as { key: number; isActive: boolean })\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Preview = memo(function Preview({ children, isActive }: PreviewProps) {\r\n  return (\r\n    <div\r\n      className={`h-full w-full overflow-hidden relative ${!isActive ? \"hidden\" : \"\"}`}\r\n    >\r\n      <div className=\"relative z-10 h-full w-full\">{children}</div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst CodeView = memo(function CodeView({ children, lang, isActive }: CodeViewProps) {\r\n  if (!isActive) return null;\r\n  return <CodeEditor codeString={children} language={lang || \"html\"} />;\r\n});\r\nconst Code = CodeView;\r\n\r\nconst HtmlRenderer = memo(function HtmlRenderer({\r\n  htmlContent,\r\n}: HtmlRendererProps) {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    // Initialize with current dark mode state\r\n    if (typeof document !== \"undefined\") {\r\n      return document.documentElement.classList.contains(\"dark\");\r\n    }\r\n    return false;\r\n  });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [iframeKey, setIframeKey] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const checkDarkMode = () => {\r\n      const newIsDark = document.documentElement.classList.contains(\"dark\");\r\n      if (newIsDark !== isDark) {\r\n        setIsDark(newIsDark);\r\n        // Force iframe reload when dark mode changes\r\n        setIframeKey((prev) => prev + 1);\r\n        setIsLoading(true);\r\n      }\r\n    };\r\n\r\n    const observer = new MutationObserver(checkDarkMode);\r\n    observer.observe(document.documentElement, {\r\n      attributes: true,\r\n      attributeFilter: [\"class\"],\r\n    });\r\n\r\n    return () => observer.disconnect();\r\n  }, [isDark]);\r\n\r\n  // Reset loading when htmlContent changes\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    setIframeKey((prev) => prev + 1);\r\n  }, [htmlContent]);\r\n\r\n  const handleIframeLoad = useCallback(() => {\r\n    setIsLoading(false);\r\n  }, []);\r\n\r\n  const iframeSrcDoc = `\r\n    <!DOCTYPE html>\r\n    <html class=\"h-full ${isDark ? \"dark\" : \"\"}\">\r\n      <head>\r\n        <script src=\"https://cdn.tailwindcss.com\"></script>\r\n        <script>\r\n          tailwind.config = {\r\n            darkMode: 'class'\r\n          }\r\n        </script>\r\n        <link href=\"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap\" rel=\"stylesheet\">\r\n        <style>\r\n          html, body { \r\n            font-family: 'Inter', sans-serif;\r\n            margin: 0;\r\n            padding: 0;\r\n            min-height: 100vh;\r\n            background-color: ${isDark ? \"#000000\" : \"#ffffff\"};\r\n          }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        ${htmlContent}\r\n      </body>\r\n    </html>\r\n  `;\r\n\r\n  return (\r\n    <div className=\"h-full relative\">\r\n      {isLoading && (\r\n        <div className=\"absolute inset-0 flex items-center justify-center bg-gray-50 dark:bg-[#0d1117] z-10\">\r\n          <div className=\"flex items-center gap-3 text-gray-600 dark:text-gray-400\">\r\n            <div className=\"w-5 h-5 border-2 border-gray-300 dark:border-gray-600 border-t-blue-500 rounded-full animate-spin\"></div>\r\n            <span className=\"text-sm\">Loading preview...</span>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <iframe\r\n        key={iframeKey}\r\n        srcDoc={iframeSrcDoc}\r\n        title=\"Demo Preview\"\r\n        sandbox=\"allow-scripts\"\r\n        className=\"w-full h-full border-0\"\r\n        style={{ backgroundColor: \"transparent\" }}\r\n        onLoad={handleIframeLoad}\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nconst Header = memo(function Header({ tabs, activeTabId, onTabClick }: HeaderProps) {\r\n  return (\r\n    <div className=\"flex items-center justify-between p-3 border-b border-gray-200 dark:border-gray-800 bg-gray-100/60 dark:bg-[#21262d]/60\">\r\n      <div className=\"flex items-center gap-2 overflow-x-auto\">\r\n        <div className=\"flex items-center gap-1.5 flex-shrink-0\">\r\n          <span className=\"w-3 h-3 rounded-full bg-gray-400 dark:bg-gray-700\"></span>\r\n          <span className=\"w-3 h-3 rounded-full bg-gray-400 dark:bg-gray-700\"></span>\r\n          <span className=\"w-3 h-3 rounded-full bg-gray-400 dark:bg-gray-700\"></span>\r\n        </div>\r\n        <div className=\"flex items-center ml-2 sm:ml-4 gap-1\">\r\n          {tabs.map((tab) => (\r\n            <Tab\r\n              key={tab.id}\r\n              id={tab.id}\r\n              icon={tab.icon}\r\n              text={tab.title}\r\n              active={tab.id === activeTabId}\r\n              onClick={onTabClick}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <a\r\n        href=\"#\"\r\n        className=\"flex-shrink-0 flex items-center gap-2 ml-4 px-3 py-1.5 text-sm rounded-md transition-all text-gray-600 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700 hover:text-gray-900 dark:hover:text-white\"\r\n      >\r\n        <span className=\"hidden md:inline\">View on GitHub</span>\r\n        <span className=\"inline md:hidden\">GitHub</span>\r\n        <ExternalLink size={14} />\r\n      </a>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst Tab = memo(function Tab({ id, icon, text, active, onClick }: TabProps) {\r\n  return (\r\n    <button\r\n      onClick={() => onClick(id)}\r\n      className={`flex-shrink-0 flex items-center gap-2 px-3 py-1.5 text-sm rounded-md transition-all ${\r\n        active\r\n          ? \"bg-white dark:bg-[#0d1117] text-gray-900 dark:text-white shadow-sm\"\r\n          : \"text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800 hover:text-gray-900 dark:hover:text-white\"\r\n      }`}\r\n    >\r\n      {icon} <span>{text}</span>\r\n    </button>\r\n  );\r\n});\r\n\r\nconst CodeEditor = memo(function CodeEditor({ codeString, language }: CodeEditorProps) {\r\n  const [lines, setLines] = useState<React.ReactNode[][]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [copied, setCopied] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let isMounted = true;\r\n    const highlight = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const codeLines = codeString.trim().split(\"\\n\");\r\n        const parsedLines = codeLines.map((line, lineIndex) => {\r\n          if (language === \"html\") {\r\n            const htmlTokens: React.ReactNode[] = [];\r\n\r\n            const patterns = [\r\n              { regex: /(<\\/?[a-zA-Z][^>]*>)/g, color: \"#7dd3fc\" }, // Tags\r\n              { regex: /(\\s[a-zA-Z-]+)=/g, color: \"#fbbf24\" }, // Attributes\r\n              { regex: /(=\"[^\"]*\")/g, color: \"#86efac\" }, // Attribute values\r\n              { regex: /(<!--.*?-->)/g, color: \"#6b7280\" }, // Comments\r\n            ];\r\n\r\n            const matches: Array<{\r\n              match: string;\r\n              color: string;\r\n              index: number;\r\n            }> = [];\r\n\r\n            patterns.forEach(({ regex, color }) => {\r\n              let match;\r\n              while ((match = regex.exec(line)) !== null) {\r\n                matches.push({\r\n                  match: match[0],\r\n                  color,\r\n                  index: match.index,\r\n                });\r\n              }\r\n            });\r\n\r\n            matches.sort((a, b) => a.index - b.index);\r\n\r\n            let lastIndex = 0;\r\n            matches.forEach((match, i) => {\r\n              if (match.index > lastIndex) {\r\n                htmlTokens.push(\r\n                  <span key={`text-${i}`} style={{ color: \"#e5e7eb\" }}>\r\n                    {line.slice(lastIndex, match.index)}\r\n                  </span>\r\n                );\r\n              }\r\n              htmlTokens.push(\r\n                <span key={`match-${i}`} style={{ color: match.color }}>\r\n                  {match.match}\r\n                </span>\r\n              );\r\n              lastIndex = match.index + match.match.length;\r\n            });\r\n\r\n            if (lastIndex < line.length) {\r\n              htmlTokens.push(\r\n                <span key=\"remaining\" style={{ color: \"#e5e7eb\" }}>\r\n                  {line.slice(lastIndex)}\r\n                </span>\r\n              );\r\n            }\r\n\r\n            return htmlTokens.length > 0\r\n              ? htmlTokens\r\n              : [\r\n                  <span key={lineIndex} style={{ color: \"#e5e7eb\" }}>\r\n                    {line}\r\n                  </span>,\r\n                ];\r\n          } else {\r\n            return [\r\n              <span key={lineIndex} style={{ color: \"#e5e7eb\" }}>\r\n                {line}\r\n              </span>,\r\n            ];\r\n          }\r\n        });\r\n\r\n        if (isMounted) {\r\n          setLines(parsedLines);\r\n          setIsLoading(false);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error highlighting code:\", error);\r\n        if (isMounted) {\r\n          setLines(\r\n            codeString\r\n              .trim()\r\n              .split(\"\\n\")\r\n              .map((line, i) => [\r\n                <span key={i} style={{ color: \"#e5e7eb\" }}>\r\n                  {line}\r\n                </span>,\r\n              ])\r\n          );\r\n          setIsLoading(false);\r\n        }\r\n      }\r\n    };\r\n    highlight();\r\n    return () => {\r\n      isMounted = false;\r\n    };\r\n  }, [codeString, language]);\r\n\r\n  const handleCopy = async () => {\r\n    try {\r\n      if (navigator.clipboard && window.isSecureContext) {\r\n        await navigator.clipboard.writeText(codeString);\r\n        setCopied(true);\r\n        setTimeout(() => setCopied(false), 2000);\r\n      } else {\r\n        // Fallback for older browsers\r\n        const textArea = document.createElement(\"textarea\");\r\n        textArea.value = codeString;\r\n        textArea.style.position = \"fixed\";\r\n        textArea.style.top = \"-9999px\";\r\n        textArea.style.left = \"-9999px\";\r\n        document.body.appendChild(textArea);\r\n        textArea.select();\r\n        document.execCommand(\"copy\");\r\n        document.body.removeChild(textArea);\r\n        setCopied(true);\r\n        setTimeout(() => setCopied(false), 2000);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Failed to copy text: \", err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-full w-full relative group\">\r\n      <button\r\n        onClick={handleCopy}\r\n        className=\"absolute top-2 right-2 p-2 rounded-md bg-gray-200 dark:bg-[#21262d] border border-gray-300 dark:border-gray-700 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-300 dark:hover:bg-[#30363d] transition-all opacity-0 group-hover:opacity-100 focus:opacity-100 z-10\"\r\n        title=\"Copy code\"\r\n      >\r\n        {copied ? (\r\n          <Check size={16} className=\"text-green-500\" />\r\n        ) : (\r\n          <Copy size={16} />\r\n        )}\r\n      </button>\r\n      <div className=\"p-4 text-sm font-mono h-full overflow-auto\">\r\n        <div className=\"flex\">\r\n          <div\r\n            className=\"pr-4 text-right text-gray-500 dark:text-gray-500 select-none\"\r\n            style={{ lineHeight: \"1.5rem\" }}\r\n          >\r\n            {lines.map((_, i) => (\r\n              <div key={i}>{i + 1}</div>\r\n            ))}\r\n          </div>\r\n          <div className=\"flex-1\">\r\n            {isLoading ? (\r\n              <div className=\"text-gray-600 dark:text-gray-400 animate-pulse\">\r\n                Loading syntax...\r\n              </div>\r\n            ) : (\r\n              <pre className=\"m-0 p-0 bg-transparent whitespace-pre-wrap\">\r\n                <code className=\"block break-words\">\r\n                  {lines.map((tokens, i) => (\r\n                    <div\r\n                      key={i}\r\n                      className=\"hover:bg-gray-100 dark:hover:bg-[#1f242c] transition-colors rounded-sm px-2 -ml-2\"\r\n                      style={{ lineHeight: \"1.5rem\" }}\r\n                    >\r\n                      {tokens.length > 0 ? tokens : <span>&nbsp;</span>}\r\n                    </div>\r\n                  ))}\r\n                </code>\r\n              </pre>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n",
      "type": "registry:ui"
    },
    {
      "path": "html-code-demo.tsx",
      "content": "\"use client\"\r\nimport HtmlCodeTabs from './html-code';\r\n\r\nexport default function HtmlCodeDemo() {\r\n  const htmlCode = `<body class=\"h-full antialiased font-sans bg-transparent flex items-center justify-center\">\r\n  <!-- Content -->\r\n  <button class=\"relative z-10 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition-all duration-300 transform hover:scale-105 shadow-lg hover:shadow-blue-500/50\">\r\n    Click me\r\n  </button>\r\n</body>`;\r\n\r\n  return (\r\n    <HtmlCodeTabs \r\n      htmlContent={htmlCode}\r\n      title=\"Demo\"\r\n      fileName=\"index.html\"\r\n      className=\"min-h-[600px]\"\r\n    />\r\n  );\r\n}",
      "type": "registry:ui"
    },
    {
      "path": "html-code-examples.tsx",
      "content": "\"use client\"\r\nimport HtmlCodeTabs from './html-code';\r\n\r\n// Basic Button Example\r\nexport function BasicButtonExample() {\r\n  const htmlCode = `<body class=\"h-full antialiased font-sans bg-transparent flex items-center justify-center\">\r\n  <button class=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition-colors\">\r\n    Click me\r\n  </button>\r\n</body>`;\r\n\r\n  return (\r\n    <HtmlCodeTabs \r\n      htmlContent={htmlCode}\r\n      title=\"Basic Button\"\r\n      fileName=\"button.html\"\r\n      className=\"min-h-[400px]\"\r\n    />\r\n  );\r\n}",
      "type": "registry:ui"
    }
  ]
}