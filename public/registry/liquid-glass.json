{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "liquid-glass",
  "title": "Liquid Glass",
  "description": "A minimalistic liquid glass component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "liquid-glass.tsx",
      "content": "\"use client\";\r\nimport React, { useEffect, useRef, useState, useId, useMemo } from \"react\";\r\nimport { cva } from \"class-variance-authority\";\r\nimport { clsx } from \"clsx\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\n// utility\r\nconst cn = (...inputs: Parameters<typeof clsx>) => twMerge(clsx(inputs));\r\n\r\nconst useDarkMode = (): boolean => {\r\n  const [isDark, setIsDark] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (typeof window === \"undefined\") return;\r\n\r\n    const mediaQuery = window.matchMedia(\"(prefers-color-scheme: dark)\");\r\n    setIsDark(mediaQuery.matches);\r\n\r\n    const handler = (e: MediaQueryListEvent) => setIsDark(e.matches);\r\n    mediaQuery.addEventListener(\"change\", handler);\r\n    return () => mediaQuery.removeEventListener(\"change\", handler);\r\n  }, []);\r\n\r\n  return isDark;\r\n};\r\n\r\n\r\nconst GLASS_PRESETS = {\r\n  subtle: {\r\n    backgroundOpacity: 0.06,\r\n    saturation: 1.1,\r\n    brightness: 55,\r\n    blur: 8,\r\n    displace: 0.3,\r\n    distortionScale: -80,\r\n    redOffset: -2,\r\n    greenOffset: 6,\r\n    blueOffset: 12,\r\n    mixBlendMode: \"difference\",\r\n  },\r\n  default: {\r\n    backgroundOpacity: 0.1,\r\n    saturation: 1.4,\r\n    brightness: 55,\r\n    blur: 10,\r\n    displace: 0.5,\r\n    distortionScale: -160,\r\n    redOffset: 0,\r\n    greenOffset: 8,\r\n    blueOffset: 16,\r\n    mixBlendMode: \"difference\",\r\n  },\r\n  bold: {\r\n    backgroundOpacity: 0.18,\r\n    saturation: 1.8,\r\n    brightness: 60,\r\n    blur: 12,\r\n    displace: 0.8,\r\n    distortionScale: -240,\r\n    redOffset: 6,\r\n    greenOffset: 12,\r\n    blueOffset: 24,\r\n    mixBlendMode: \"screen\",\r\n  },\r\n  ghost: {\r\n    backgroundOpacity: 0,\r\n    saturation: 1,\r\n    brightness: 55,\r\n    blur: 6,\r\n    displace: 0,\r\n    distortionScale: 0,\r\n    redOffset: 0,\r\n    greenOffset: 0,\r\n    blueOffset: 0,\r\n    mixBlendMode: \"difference\",\r\n  },\r\n};\r\n\r\ntype GlassVariant = keyof typeof GLASS_PRESETS;\r\n\r\nconst GLASS_DEFAULTS = {\r\n  width: \"auto\",\r\n  height: \"auto\",\r\n  borderRadius: 20,\r\n  borderWidth: 0.07,\r\n  opacity: 0.93,\r\n  xChannel: \"R\",\r\n  yChannel: \"G\",\r\n};\r\n\r\ninterface GlassProps {\r\n  variant?: GlassVariant;\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n  style?: React.CSSProperties;\r\n  width?: number | string;\r\n  height?: number | string;\r\n  borderRadius?: number;\r\n  borderWidth?: number;\r\n  brightness?: number;\r\n  opacity?: number;\r\n  blur?: number;\r\n  displace?: number;\r\n  backgroundOpacity?: number;\r\n  saturation?: number;\r\n  distortionScale?: number;\r\n  redOffset?: number;\r\n  greenOffset?: number;\r\n  blueOffset?: number;\r\n  xChannel?: \"R\" | \"G\" | \"B\" | \"A\";\r\n  yChannel?: \"R\" | \"G\" | \"B\" | \"A\";\r\n  mixBlendMode?: string;\r\n}\r\n\r\nconst Glass: React.FC<GlassProps> = (rawProps) => {\r\n  const {\r\n    // new\r\n    variant = \"default\",\r\n    // core\r\n    children,\r\n    className = \"\",\r\n    style = {},\r\n    width,\r\n    height,\r\n    borderRadius,\r\n    borderWidth,\r\n    brightness,\r\n    opacity,\r\n    blur,\r\n    displace,\r\n    backgroundOpacity,\r\n    saturation,\r\n    distortionScale,\r\n    redOffset,\r\n    greenOffset,\r\n    blueOffset,\r\n    xChannel,\r\n    yChannel,\r\n    mixBlendMode,\r\n  } = rawProps;\r\n\r\n  const uniqueId = useId().replace(/:/g, \"-\");\r\n  const filterId = `glass-filter-${uniqueId}`;\r\n  const redGradId = `red-grad-${uniqueId}`;\r\n  const blueGradId = `blue-grad-${uniqueId}`;\r\n\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const feImageRef = useRef<SVGFEImageElement>(null);\r\n  const redChannelRef = useRef<SVGFEDisplacementMapElement>(null);\r\n  const greenChannelRef = useRef<SVGFEDisplacementMapElement>(null);\r\n  const blueChannelRef = useRef<SVGFEDisplacementMapElement>(null);\r\n  const gaussianBlurRef = useRef<SVGFEGaussianBlurElement>(null);\r\n\r\n  const isDarkMode = useDarkMode();\r\n\r\n  const v = useMemo(() => {\r\n    const p = GLASS_PRESETS[variant] ?? GLASS_PRESETS.default;\r\n    return {\r\n      ...GLASS_DEFAULTS,\r\n      ...p,\r\n      ...(width !== undefined && { width }),\r\n      ...(height !== undefined && { height }),\r\n      ...(borderRadius !== undefined && { borderRadius }),\r\n      ...(borderWidth !== undefined && { borderWidth }),\r\n      ...(brightness !== undefined && { brightness }),\r\n      ...(opacity !== undefined && { opacity }),\r\n      ...(blur !== undefined && { blur }),\r\n      ...(displace !== undefined && { displace }),\r\n      ...(backgroundOpacity !== undefined && { backgroundOpacity }),\r\n      ...(saturation !== undefined && { saturation }),\r\n      ...(distortionScale !== undefined && { distortionScale }),\r\n      ...(redOffset !== undefined && { redOffset }),\r\n      ...(greenOffset !== undefined && { greenOffset }),\r\n      ...(blueOffset !== undefined && { blueOffset }),\r\n      ...(xChannel !== undefined && { xChannel }),\r\n      ...(yChannel !== undefined && { yChannel }),\r\n      ...(mixBlendMode !== undefined && { mixBlendMode }),\r\n    };\r\n  }, [\r\n    variant,\r\n    width,\r\n    height,\r\n    borderRadius,\r\n    borderWidth,\r\n    brightness,\r\n    opacity,\r\n    blur,\r\n    displace,\r\n    backgroundOpacity,\r\n    saturation,\r\n    distortionScale,\r\n    redOffset,\r\n    greenOffset,\r\n    blueOffset,\r\n    xChannel,\r\n    yChannel,\r\n    mixBlendMode,\r\n  ]);\r\n\r\n  const generateDisplacementMap = () => {\r\n    const rect = containerRef.current?.getBoundingClientRect();\r\n    const actualWidth = rect?.width || 400;\r\n    const actualHeight = rect?.height || 200;\r\n    const edgeSize =\r\n      Math.min(actualWidth, actualHeight) * (v.borderWidth * 0.5);\r\n\r\n    const svgContent = `\r\n      <svg viewBox=\"0 0 ${actualWidth} ${actualHeight}\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <defs>\r\n          <linearGradient id=\"${redGradId}\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\r\n            <stop offset=\"0%\" stop-color=\"#0000\"/>\r\n            <stop offset=\"100%\" stop-color=\"red\"/>\r\n          </linearGradient>\r\n          <linearGradient id=\"${blueGradId}\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\r\n            <stop offset=\"0%\" stop-color=\"#0000\"/>\r\n            <stop offset=\"100%\" stop-color=\"blue\"/>\r\n          </linearGradient>\r\n        </defs>\r\n        <rect x=\"0\" y=\"0\" width=\"${actualWidth}\" height=\"${actualHeight}\" fill=\"black\"></rect>\r\n        <rect x=\"0\" y=\"0\" width=\"${actualWidth}\" height=\"${actualHeight}\" rx=\"${v.borderRadius}\" fill=\"url(#${redGradId})\" />\r\n        <rect x=\"0\" y=\"0\" width=\"${actualWidth}\" height=\"${actualHeight}\" rx=\"${v.borderRadius}\" fill=\"url(#${blueGradId})\" style=\"mix-blend-mode: ${v.mixBlendMode}\" />\r\n        <rect x=\"${edgeSize}\" y=\"${edgeSize}\" width=\"${\r\n      actualWidth - edgeSize * 2\r\n    }\" height=\"${\r\n      actualHeight - edgeSize * 2\r\n    }\" rx=\"${v.borderRadius}\" fill=\"hsl(0 0% ${v.brightness}% / ${\r\n      v.opacity\r\n    })\" style=\"filter:blur(${v.blur}px)\" />\r\n      </svg>\r\n    `;\r\n\r\n    return `data:image/svg+xml,${encodeURIComponent(svgContent)}`;\r\n  };\r\n\r\n  const updateDisplacementMap = () => {\r\n    if (feImageRef.current) {\r\n      feImageRef.current.setAttribute(\"href\", generateDisplacementMap());\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateDisplacementMap();\r\n    [\r\n      { ref: redChannelRef, offset: v.redOffset },\r\n      { ref: greenChannelRef, offset: v.greenOffset },\r\n      { ref: blueChannelRef, offset: v.blueOffset },\r\n    ].forEach(({ ref, offset }) => {\r\n      if (ref.current) {\r\n        ref.current.setAttribute(\r\n          \"scale\",\r\n          (v.distortionScale + offset).toString()\r\n        );\r\n        ref.current.setAttribute(\"xChannelSelector\", v.xChannel);\r\n        ref.current.setAttribute(\"yChannelSelector\", v.yChannel);\r\n      }\r\n    });\r\n\r\n    if (gaussianBlurRef.current) {\r\n      gaussianBlurRef.current.setAttribute(\r\n        \"stdDeviation\",\r\n        v.displace.toString()\r\n      );\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [\r\n    v.width,\r\n    v.height,\r\n    v.borderRadius,\r\n    v.borderWidth,\r\n    v.brightness,\r\n    v.opacity,\r\n    v.blur,\r\n    v.displace,\r\n    v.distortionScale,\r\n    v.redOffset,\r\n    v.greenOffset,\r\n    v.blueOffset,\r\n    v.xChannel,\r\n    v.yChannel,\r\n    v.mixBlendMode,\r\n    variant,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!containerRef.current) return;\r\n\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      setTimeout(updateDisplacementMap, 0);\r\n    });\r\n\r\n    resizeObserver.observe(containerRef.current);\r\n\r\n    return () => {\r\n      resizeObserver.disconnect();\r\n    };\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setTimeout(updateDisplacementMap, 0);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [v.width, v.height]);\r\n\r\n  const [svgFilterSupported, setSvgFilterSupported] = useState(true);\r\n  const [backdropFilterSupported, setBackdropFilterSupported] =\r\n    useState(true);\r\n\r\n  useEffect(() => {\r\n    const checkSupport = () => {\r\n      const isWebkit =\r\n        /Safari/.test(navigator.userAgent) &&\r\n        !/Chrome/.test(navigator.userAgent);\r\n      const isFirefox = /Firefox/.test(navigator.userAgent);\r\n      setSvgFilterSupported(!isWebkit && !isFirefox);\r\n      setBackdropFilterSupported(CSS.supports(\"backdrop-filter\", \"blur(10px)\"));\r\n    };\r\n    checkSupport();\r\n  }, [filterId]);\r\n\r\n  const getContainerStyles = (): React.CSSProperties => {\r\n    const baseStyles = {\r\n      ...style,\r\n      width: typeof v.width === \"number\" ? `${v.width}px` : v.width,\r\n      height: typeof v.height === \"number\" ? `${v.height}px` : v.height,\r\n      borderRadius: `${v.borderRadius}px`,\r\n      \"--glass-frost\": v.backgroundOpacity,\r\n      \"--glass-saturation\": v.saturation,\r\n    };\r\n\r\n    if (svgFilterSupported) {\r\n      return {\r\n        ...baseStyles,\r\n        background: isDarkMode\r\n          ? `hsl(0 0% 0% / ${v.backgroundOpacity})`\r\n          : `hsl(0 0% 100% / ${v.backgroundOpacity})`,\r\n        backdropFilter: `url(#${filterId}) saturate(${v.saturation})`,\r\n        boxShadow: isDarkMode\r\n          ? `0 0 2px 1px color-mix(in oklch, white, transparent 65%) inset,\r\n             0 0 10px 4px color-mix(in oklch, white, transparent 85%) inset,\r\n             0px 4px 16px rgba(17, 17, 26, 0.05),\r\n             0px 8px 24px rgba(17, 17, 26, 0.05),\r\n             0px 16px 56px rgba(17, 17, 26, 0.05),\r\n             0px 4px 16px rgba(17, 17, 26, 0.05) inset,\r\n             0px 8px 24px rgba(17, 17, 26, 0.05) inset,\r\n             0px 16px 56px rgba(17, 17, 26, 0.05) inset`\r\n          : `0 0 2px 1px color-mix(in oklch, black, transparent 85%) inset,\r\n             0 0 10px 4px color-mix(in oklch, black, transparent 90%) inset,\r\n             0px 4px 16px rgba(17, 17, 26, 0.05),\r\n             0px 8px 24px rgba(17, 17, 26, 0.05),\r\n             0px 16px 56px rgba(17, 17, 26, 0.05),\r\n             0px 4px 16px rgba(17, 17, 26, 0.05) inset,\r\n             0px 8px 24px rgba(17, 17, 26, 0.05) inset,\r\n             0px 16px 56px rgba(17, 17, 26, 0.05) inset`,\r\n      };\r\n    } else {\r\n      if (isDarkMode) {\r\n        if (!backdropFilterSupported) {\r\n          return {\r\n            ...baseStyles,\r\n            background: \"rgba(0, 0, 0, 0.4)\",\r\n            border: \"1px solid rgba(255, 255, 255, 0.2)\",\r\n            boxShadow: `inset 0 1px 0 0 rgba(255, 255, 255, 0.2),\r\n                        inset 0 -1px 0 0 rgba(255, 255, 255, 0.1)`,\r\n          };\r\n        } else {\r\n          return {\r\n            ...baseStyles,\r\n            background: \"rgba(255, 255, 255, 0.1)\",\r\n            backdropFilter: \"blur(12px) saturate(1.8) brightness(1.2)\",\r\n            WebkitBackdropFilter: \"blur(12px) saturate(1.8) brightness(1.2)\",\r\n            border: \"1px solid rgba(255, 255, 255, 0.2)\",\r\n            boxShadow: `inset 0 1px 0 0 rgba(255, 255, 255, 0.2),\r\n                        inset 0 -1px 0 0 rgba(255, 255, 255, 0.1)`,\r\n          };\r\n        }\r\n      } else {\r\n        if (!backdropFilterSupported) {\r\n          return {\r\n            ...baseStyles,\r\n            background: \"rgba(255, 255, 255, 0.4)\",\r\n            border: \"1px solid rgba(255, 255, 255, 0.3)\",\r\n            boxShadow: `inset 0 1px 0 0 rgba(255, 255, 255, 0.5),\r\n                        inset 0 -1px 0 0 rgba(255, 255, 255, 0.3)`,\r\n          };\r\n        } else {\r\n          return {\r\n            ...baseStyles,\r\n            background: \"rgba(255, 255, 255, 0.25)\",\r\n            backdropFilter: \"blur(12px) saturate(1.8) brightness(1.1)\",\r\n            WebkitBackdropFilter: \"blur(12px) saturate(1.8) brightness(1.1)\",\r\n            border: \"1px solid rgba(255, 255, 255, 0.3)\",\r\n            boxShadow: `0 8px 32px 0 rgba(31, 38, 135, 0.2),\r\n                        0 2px 16px 0 rgba(31, 38, 135, 0.1),\r\n                        inset 0 1px 0 0 rgba(255, 255, 255, 0.4),\r\n                        inset 0 -1px 0 0 rgba(255, 255, 255, 0.2)`,\r\n          };\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const glassClasses =\r\n    \"relative flex items-center justify-center overflow-hidden transition-opacity duration-[260ms] ease-out\";\r\n  const focusVisibleClasses = isDarkMode\r\n    ? \"focus-visible:outline-2 focus-visible:outline-[#0A84FF] focus-visible:outline-offset-2\"\r\n    : \"focus-visible:outline-2 focus-visible:outline-[#007AFF] focus-visible:outline-offset-2\";\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={cn(glassClasses, focusVisibleClasses, className)}\r\n      style={getContainerStyles()}\r\n    >\r\n      <svg\r\n        className=\"w-full h-full pointer-events-none absolute inset-0 opacity-0 -z-10\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n      >\r\n        <defs>\r\n          <filter\r\n            id={filterId}\r\n            colorInterpolationFilters=\"sRGB\"\r\n            x=\"0%\"\r\n            y=\"0%\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n          >\r\n            <feImage\r\n              ref={feImageRef}\r\n              href={generateDisplacementMap() || \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1' height='1'%3E%3C/svg%3E\"}\r\n              x=\"0\"\r\n              y=\"0\"\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              preserveAspectRatio=\"none\"\r\n              result=\"map\"\r\n            />\r\n\r\n            <feDisplacementMap\r\n              ref={redChannelRef}\r\n              in=\"SourceGraphic\"\r\n              in2=\"map\"\r\n              id=\"redchannel\"\r\n              result=\"dispRed\"\r\n            />\r\n            <feColorMatrix\r\n              in=\"dispRed\"\r\n              type=\"matrix\"\r\n              values=\"1 0 0 0 0\r\n                      0 0 0 0 0\r\n                      0 0 0 0 0\r\n                      0 0 0 1 0\"\r\n              result=\"red\"\r\n            />\r\n\r\n            <feDisplacementMap\r\n              ref={greenChannelRef}\r\n              in=\"SourceGraphic\"\r\n              in2=\"map\"\r\n              id=\"greenchannel\"\r\n              result=\"dispGreen\"\r\n            />\r\n            <feColorMatrix\r\n              in=\"dispGreen\"\r\n              type=\"matrix\"\r\n              values=\"0 0 0 0 0\r\n                      0 1 0 0 0\r\n                      0 0 0 0 0\r\n                      0 0 0 1 0\"\r\n              result=\"green\"\r\n            />\r\n\r\n            <feDisplacementMap\r\n              ref={blueChannelRef}\r\n              in=\"SourceGraphic\"\r\n              in2=\"map\"\r\n              id=\"bluechannel\"\r\n              result=\"dispBlue\"\r\n            />\r\n            <feColorMatrix\r\n              in=\"dispBlue\"\r\n              type=\"matrix\"\r\n              values=\"0 0 0 0 0\r\n                      0 0 0 0 0\r\n                      0 0 1 0 0\r\n                      0 0 0 1 0\"\r\n              result=\"blue\"\r\n            />\r\n\r\n            <feBlend in=\"red\" in2=\"green\" mode=\"screen\" result=\"rg\" />\r\n            <feBlend in=\"rg\" in2=\"blue\" mode=\"screen\" result=\"output\" />\r\n            <feGaussianBlur\r\n              ref={gaussianBlurRef}\r\n              in=\"output\"\r\n              stdDeviation=\"0.7\"\r\n            />\r\n          </filter>\r\n        </defs>\r\n      </svg>\r\n\r\n      <div className=\"w-full h-full flex items-center justify-center p-2 rounded-[inherit] relative z-10\">\r\n        {children}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst glassButtonSizes = cva(\"rounded-[inherit]\", {\r\n  variants: {\r\n    size: {\r\n      sm: \"px-3 py-1.5 text-sm\",\r\n      md: \"px-4 py-2\",\r\n      lg: \"px-6 py-3 text-lg\",\r\n      icon: \"p-2 size-10\",\r\n    },\r\n  },\r\n  defaultVariants: {\r\n    size: \"md\",\r\n  },\r\n});\r\n\r\ntype GlassButtonProps = {\r\n  children: React.ReactNode;\r\n  onClick?: React.MouseEventHandler<HTMLButtonElement>;\r\n  className?: string;\r\n  variant?: GlassVariant;\r\n  size?: \"sm\" | \"md\" | \"lg\" | \"icon\";\r\n  textClassName?: string;\r\n  disabled?: boolean;\r\n} & Omit<GlassProps, \"children\" | \"variant\" | \"className\" | \"style\">;\r\n\r\nconst GlassButton: React.FC<GlassButtonProps> = ({\r\n  children,\r\n  onClick,\r\n  className = \"\",\r\n  variant = \"default\",\r\n  size = \"md\",\r\n  textClassName = \"text-white font-semibold\",\r\n  disabled,\r\n  ...surfaceOverrides \r\n}) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      className={cn(\r\n        \"relative inline-flex items-center justify-center cursor-pointer select-none\",\r\n        \"transform active:scale-95 transition-transform duration-150 ease-in-out\",\r\n        \"focus:outline-none disabled:opacity-50 disabled:pointer-events-none\",\r\n        className\r\n      )}\r\n    >\r\n      <Glass\r\n        variant={variant}\r\n        className={cn(glassButtonSizes({ size }))}\r\n        {...surfaceOverrides}\r\n      >\r\n        <span className={cn(textClassName)}>{children}</span>\r\n      </Glass>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default GlassButton;\r\n\r\n",
      "type": "registry:ui"
    },
    {
      "path": "liquid-glass-demo.tsx",
      "content": "\"use client\";\r\nimport GlassButton from \"./liquid-glass\"\r\n\r\n\r\nfunction LiquidGlassDemo() {\r\n\r\n  return (\r\n    <div className=\"relative w-full h-96 transition-colors duration-500 bg-gray-100 dark:bg-gray-900 overflow-hidden rounded-lg\">\r\n      <div\r\n        className=\"absolute inset-0 w-full h-full bg-cover bg-center\"\r\n        style={{\r\n          backgroundImage:\r\n            \"url('https://images.unsplash.com/photo-1744125156184-e0d7e0bc04c4?q=80&w=687&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D')\",\r\n        }}\r\n      ></div>\r\n\r\n      <div className=\"relative z-10 w-full h-full flex items-center justify-center p-6\">\r\n        <div className=\"flex gap-4 flex-wrap justify-center items-center\">\r\n          <GlassButton variant=\"subtle\" size=\"sm\" onClick={() => console.log(\"Subtle\")}>\r\n            Subtle\r\n          </GlassButton>\r\n          <GlassButton variant=\"default\" size=\"md\" onClick={() => console.log(\"Default\")}>\r\n            Default\r\n          </GlassButton>\r\n          <GlassButton variant=\"bold\" size=\"lg\" onClick={() => console.log(\"Bold\")}>\r\n            Bold\r\n          </GlassButton>\r\n          <GlassButton variant=\"ghost\" size=\"md\" onClick={() => console.log(\"Ghost\")} textClassName=\"text-white/80\">\r\n            Ghost\r\n          </GlassButton>\r\n          <GlassButton\r\n            variant=\"default\"\r\n            size=\"icon\"\r\n            aria-label=\"Icon\"\r\n            onClick={() => console.log(\"Icon\")}\r\n          >\r\n            😎\r\n          </GlassButton>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LiquidGlassDemo;",
      "type": "registry:ui"
    }
  ]
}