{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "text-highlighter",
  "title": "Text Highlighter",
  "description": "A minimalistic text highlighter component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "text-highlighter.tsx",
      "content": "import TextHighlighter from './text-highlighter';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center text-black dark:text-white p-4\">\r\n      <div className=\"text-center max-w-4xl\">\r\n        <h1 className=\"text-4xl md:text-5xl font-light leading-tight mb-8\">\r\n          Welcome to <TextHighlighter direction=\"rtl\">Sera UI</TextHighlighter>\r\n        </h1>\r\n\r\n        <p className=\"mt-6 text-lg md:text-xl leading-relaxed\">\r\n          <TextHighlighter>Sera UI</TextHighlighter> is an open-source React component library\r\n          designed for building{' '}\r\n          <TextHighlighter>modern, responsive, and customizable</TextHighlighter> user interfaces\r\n          with ease. It leverages <TextHighlighter>Tailwind CSS</TextHighlighter> for styling and\r\n          focuses on simplicity, accessibility, and developer experience.\r\n        </p>\r\n\r\n        <p className=\"mt-4 text-lg md:text-xl leading-relaxed\">\r\n          Sera UI offers a collection of <TextHighlighter>pre-built components</TextHighlighter>{' '}\r\n          like buttons, cards, modals, inputs, and advanced UI patterns, enabling{' '}\r\n          <TextHighlighter>faster development</TextHighlighter> without sacrificing design quality.\r\n          Ideal for both personal projects and{' '}\r\n          <TextHighlighter>production-grade apps</TextHighlighter>, it emphasizes clean design and\r\n          modular architecture.\r\n        </p>\r\n\r\n        <p className=\"mt-4 text-lg md:text-xl leading-relaxed\">\r\n          Developers can{' '}\r\n          <TextHighlighter highlightColor=\"linear-gradient(45deg, #3b82f6, #8b5cf6)\">\r\n            Gradient highlight\r\n          </TextHighlighter>{' '}\r\n          easily to match brand requirements. With{' '}\r\n          <TextHighlighter>active community support</TextHighlighter> and detailed documentation,\r\n          Sera UI aims to{' '}\r\n          <TextHighlighter color=\"blue\">\r\n            streamline frontend development efficiently\r\n          </TextHighlighter>\r\n          .\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "text-highlighter.tsx",
      "content": "'use client';\r\nimport {\r\n  ElementType,\r\n  forwardRef,\r\n  useEffect,\r\n  useImperativeHandle,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport { cn } from '@/lib/utils';\r\n\r\ntype HighlightDirection = 'ltr' | 'rtl' | 'ttb' | 'btt';\r\n\r\ntype UseInViewOptions = {\r\n  once?: boolean;\r\n  initial?: boolean;\r\n  amount?: number;\r\n  margin?: string;\r\n};\r\n\r\ntype Transition = {\r\n  duration?: number;\r\n  delay?: number;\r\n  type?: 'spring' | 'ease' | 'linear';\r\n  bounce?: number;\r\n};\r\n\r\ntype TextHighlighterProps = {\r\n  children: React.ReactNode;\r\n  as?: ElementType;\r\n  triggerType?: 'hover' | 'ref' | 'inView' | 'auto';\r\n  transition?: Transition;\r\n  useInViewOptions?: UseInViewOptions;\r\n  className?: string;\r\n  highlightColor?: string;\r\n  useTailwindClasses?: boolean;\r\n  direction?: HighlightDirection;\r\n  rounded?: string;\r\n} & React.HTMLAttributes<HTMLElement>;\r\n\r\nexport type TextHighlighterRef = {\r\n  animate: (direction?: HighlightDirection) => void;\r\n  reset: () => void;\r\n};\r\n\r\nconst useInView = (ref: React.RefObject<HTMLElement | null>, options: UseInViewOptions = {}) => {\r\n  const [isInView, setIsInView] = useState(options.initial || false);\r\n\r\n  useEffect(() => {\r\n    const element = ref.current;\r\n    if (!element) return;\r\n\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        if (entry.isIntersecting) {\r\n          setIsInView(true);\r\n          if (options.once) {\r\n            observer.unobserve(element);\r\n          }\r\n        } else if (!options.once) {\r\n          setIsInView(false);\r\n        }\r\n      },\r\n      {\r\n        threshold: options.amount || 0.1,\r\n        rootMargin: options.margin || '0px',\r\n      }\r\n    );\r\n\r\n    observer.observe(element);\r\n\r\n    return () => observer.disconnect();\r\n  }, [ref, options.amount, options.margin, options.once]);\r\n\r\n  return isInView;\r\n};\r\n\r\nexport const TextHighlighter = forwardRef<TextHighlighterRef, TextHighlighterProps>(\r\n  (\r\n    {\r\n      children,\r\n      as = 'span',\r\n      triggerType = 'inView',\r\n      transition = { type: 'spring', duration: 0.8, delay: 0.2, bounce: 0 },\r\n      useInViewOptions = {\r\n        once: true,\r\n        initial: false,\r\n        amount: 0.1,\r\n      },\r\n      className,\r\n      highlightColor = 'linear-gradient(rgb(253 141 62), rgb(250, 196, 158))',\r\n      useTailwindClasses = false,\r\n      direction = 'ltr',\r\n      rounded = 'rounded-md',\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const componentRef = useRef<HTMLDivElement>(null);\r\n    const [isAnimating, setIsAnimating] = useState(false);\r\n    const [isHovered, setIsHovered] = useState(false);\r\n    const [currentDirection, setCurrentDirection] = useState<HighlightDirection>(direction);\r\n\r\n    // Update direction when prop changes\r\n    useEffect(() => {\r\n      setCurrentDirection(direction);\r\n    }, [direction]);\r\n\r\n    // Always call the hook, but only use the result when needed\r\n    const inViewResult = useInView(componentRef, useInViewOptions);\r\n    const isInView = triggerType === 'inView' ? inViewResult : false;\r\n\r\n    useImperativeHandle(ref, () => ({\r\n      animate: (animationDirection?: HighlightDirection) => {\r\n        if (animationDirection) {\r\n          setCurrentDirection(animationDirection);\r\n        }\r\n        setIsAnimating(true);\r\n      },\r\n      reset: () => setIsAnimating(false),\r\n    }));\r\n\r\n    const shouldAnimate =\r\n      triggerType === 'hover'\r\n        ? isHovered\r\n        : triggerType === 'inView'\r\n          ? isInView\r\n          : triggerType === 'ref'\r\n            ? isAnimating\r\n            : triggerType === 'auto'\r\n              ? true\r\n              : false;\r\n\r\n    const ElementTag = as || 'span';\r\n\r\n    const animatedSize = useMemo(() => {\r\n      switch (currentDirection) {\r\n        case 'ltr':\r\n          return shouldAnimate ? '100% 100%' : '0% 100%';\r\n        case 'rtl':\r\n          return shouldAnimate ? '100% 100%' : '0% 100%';\r\n        case 'ttb':\r\n          return shouldAnimate ? '100% 100%' : '100% 0%';\r\n        case 'btt':\r\n          return shouldAnimate ? '100% 100%' : '100% 0%';\r\n        default:\r\n          return shouldAnimate ? '100% 100%' : '0% 100%';\r\n      }\r\n    }, [shouldAnimate, currentDirection]);\r\n\r\n    const initialSize = useMemo(() => {\r\n      switch (currentDirection) {\r\n        case 'ltr':\r\n          return '0% 100%';\r\n        case 'rtl':\r\n          return '0% 100%';\r\n        case 'ttb':\r\n          return '100% 0%';\r\n        case 'btt':\r\n          return '100% 0%';\r\n        default:\r\n          return '0% 100%';\r\n      }\r\n    }, [currentDirection]);\r\n\r\n    const backgroundPosition = useMemo(() => {\r\n      switch (currentDirection) {\r\n        case 'ltr':\r\n          return '0% 0%';\r\n        case 'rtl':\r\n          return '100% 0%';\r\n        case 'ttb':\r\n          return '0% 0%';\r\n        case 'btt':\r\n          return '0% 100%';\r\n        default:\r\n          return '0% 0%';\r\n      }\r\n    }, [currentDirection]);\r\n\r\n    const getTimingFunction = (type: string = 'spring') => {\r\n      switch (type) {\r\n        case 'spring':\r\n          return 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';\r\n        case 'ease':\r\n          return 'ease-out';\r\n        case 'linear':\r\n          return 'linear';\r\n        default:\r\n          return 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';\r\n      }\r\n    };\r\n\r\n    const defaultGradient =\r\n      'bg-gradient-to-r from-orange-400 to-orange-200 dark:from-orange-500 dark:to-orange-300';\r\n\r\n    const getHighlightStyles = (): React.CSSProperties => {\r\n      const baseStyles: React.CSSProperties = {\r\n        backgroundSize: shouldAnimate ? animatedSize : initialSize,\r\n        backgroundPosition: backgroundPosition,\r\n        transition: `background-size ${transition.duration || 1}s ${getTimingFunction(transition.type)} ${transition.delay || 0}s`,\r\n      };\r\n\r\n      if (useTailwindClasses) {\r\n        return baseStyles;\r\n      } else {\r\n        const backgroundImage = highlightColor.includes('gradient')\r\n          ? highlightColor\r\n          : `linear-gradient(${highlightColor}, ${highlightColor})`;\r\n\r\n        return {\r\n          ...baseStyles,\r\n          backgroundImage,\r\n          backgroundRepeat: 'no-repeat',\r\n          boxDecorationBreak: 'clone' as const,\r\n          WebkitBoxDecorationBreak: 'clone' as const,\r\n        };\r\n      }\r\n    };\r\n\r\n    const highlightStyle = getHighlightStyles();\r\n\r\n    const getTailwindClasses = () => {\r\n      if (!useTailwindClasses) return `${rounded} px-1`;\r\n\r\n      const gradientClass = highlightColor.includes('bg-') ? highlightColor : defaultGradient;\r\n\r\n      return `${gradientClass} ${rounded} px-1`;\r\n    };\r\n\r\n    return (\r\n      <ElementTag\r\n        ref={componentRef}\r\n        onMouseEnter={() => triggerType === 'hover' && setIsHovered(true)}\r\n        onMouseLeave={() => triggerType === 'hover' && setIsHovered(false)}\r\n        {...props}\r\n      >\r\n        <span className={cn('inline', getTailwindClasses(), className)} style={highlightStyle}>\r\n          {children}\r\n        </span>\r\n      </ElementTag>\r\n    );\r\n  }\r\n);\r\n\r\nTextHighlighter.displayName = 'TextHighlighter';\r\nexport default TextHighlighter;\r\n",
      "type": "registry:ui"
    }
  ]
}