{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "3d-carousel",
  "title": "3d Carousel",
  "description": "A minimalistic 3d carousel component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "3d-carousel.tsx",
      "content": "'use client';\r\nimport React, { useMemo, useRef, useEffect, useCallback } from 'react';\r\n\r\n/* 1️⃣  Assets ————————————————————————— */\r\nconst FALLBACK =\r\n  'data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" ' +\r\n  'width=\"160\" height=\"220\"><rect width=\"100%\" height=\"100%\" ' +\r\n  'fill=\"%23e2e8f0\"/><text x=\"50%\" y=\"50%\" dominant-baseline=\"middle\"' +\r\n  ' text-anchor=\"middle\" fill=\"%234a5568\" font-size=\"18\">Image</text></svg>';\r\n\r\nconst DEFAULT_IMAGES = [\r\n  'https://i.pinimg.com/736x/9f/09/45/9f0945103fc6158cb16e1828a2665b5c.jpg',\r\n  'https://i.pinimg.com/1200x/6e/4c/39/6e4c394783c731f261f295e7ffd1deed.jpg',\r\n  'https://i.pinimg.com/1200x/1e/0c/1c/1e0c1c9c868bf07b4c27a275fb3087af.jpg',\r\n  'https://i.pinimg.com/736x/30/91/09/3091098a15810ddbbd58d5e007bc7207.jpg',\r\n  'https://i.pinimg.com/736x/07/cf/4a/07cf4a3a6f4144b4c7ac8e2ec5978dc1.jpg',\r\n  'https://i.pinimg.com/736x/5d/bf/f2/5dbff2b4c0fdcb9815e989f0db386f95.jpg',\r\n];\r\n\r\n/* 2️⃣  Config ————————————————————————— */\r\nconst CARD_W = 180;\r\nconst CARD_H = 240;\r\nconst RADIUS = 240;\r\nconst TILT_SENSITIVITY = 10;\r\nconst DRAG_SENSITIVITY = 0.5;\r\nconst INERTIA_FRICTION = 0.95;\r\nconst AUTOSPIN_SPEED = 0.08;\r\nconst IDLE_TIMEOUT = 2000;\r\n\r\n/* 3️⃣  Card Component (Memoized for Performance) ——— */\r\ninterface CardProps {\r\n  src: string;\r\n  transform: string;\r\n  cardW: number;\r\n  cardH: number;\r\n}\r\n\r\nconst Card = React.memo(({ src, transform, cardW, cardH }: CardProps) => (\r\n  <div\r\n    className=\"absolute\"\r\n    style={{\r\n      width: cardW,\r\n      height: cardH,\r\n      transform,\r\n      transformStyle: 'preserve-3d',\r\n      willChange: 'transform',\r\n    }}\r\n  >\r\n    <div\r\n      className=\"w-full h-full rounded-2xl overflow-hidden bg-white dark:bg-gray-800\r\n                 border border-gray-200 dark:border-gray-700 shadow-lg dark:shadow-gray-900/50\r\n                 transition-transform duration-300 hover:scale-105 hover:shadow-2xl dark:hover:shadow-gray-900/70\r\n                 hover:z-10\"\r\n      style={{ backfaceVisibility: 'hidden' }}\r\n    >\r\n      <img\r\n        src={src}\r\n        alt=\"Carousel item\"\r\n        width={cardW}\r\n        height={cardH}\r\n        className=\"w-full h-full object-cover\"\r\n        loading=\"lazy\"\r\n        draggable=\"false\"\r\n        onError={e => {\r\n          e.currentTarget.src = FALLBACK;\r\n        }}\r\n      />\r\n    </div>\r\n  </div>\r\n));\r\n\r\nCard.displayName = 'Card';\r\n\r\n/* 4️⃣  Main component —————————————————— */\r\ninterface ThreeDCarouselProps {\r\n  images?: string[];\r\n  radius?: number;\r\n  cardW?: number;\r\n  cardH?: number;\r\n}\r\n\r\nconst ThreeDCarousel = React.memo(\r\n  ({\r\n    images = DEFAULT_IMAGES,\r\n    radius = RADIUS,\r\n    cardW = CARD_W,\r\n    cardH = CARD_H,\r\n  }: ThreeDCarouselProps) => {\r\n    const parentRef = useRef<HTMLDivElement>(null);\r\n    const wheelRef = useRef<HTMLDivElement>(null);\r\n\r\n    const rotationRef = useRef(0);\r\n    const tiltRef = useRef(0);\r\n    const targetTiltRef = useRef(0);\r\n    const velocityRef = useRef(0);\r\n    const isDraggingRef = useRef(false);\r\n    const dragStartRef = useRef(0);\r\n    const initialRotationRef = useRef(0);\r\n    const lastInteractionRef = useRef(Date.now());\r\n    const animationFrameRef = useRef<number | null>(null);\r\n\r\n    useEffect(() => {\r\n      const handleMouseMove = (e: MouseEvent) => {\r\n        if (!parentRef.current || isDraggingRef.current) return;\r\n\r\n        lastInteractionRef.current = Date.now();\r\n        const parentRect = parentRef.current.getBoundingClientRect();\r\n        const mouseY = e.clientY - parentRect.top;\r\n        const normalizedY = (mouseY / parentRect.height - 0.5) * 2;\r\n\r\n        targetTiltRef.current = -normalizedY * TILT_SENSITIVITY;\r\n      };\r\n\r\n      window.addEventListener('mousemove', handleMouseMove);\r\n\r\n      return () => {\r\n        window.removeEventListener('mousemove', handleMouseMove);\r\n      };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n      const animate = () => {\r\n        if (!isDraggingRef.current) {\r\n          // Apply inertia\r\n          if (Math.abs(velocityRef.current) > 0.01) {\r\n            rotationRef.current += velocityRef.current;\r\n            velocityRef.current *= INERTIA_FRICTION;\r\n          } else if (Date.now() - lastInteractionRef.current > IDLE_TIMEOUT) {\r\n            rotationRef.current += AUTOSPIN_SPEED;\r\n          }\r\n        }\r\n\r\n        tiltRef.current += (targetTiltRef.current - tiltRef.current) * 0.1;\r\n\r\n        if (wheelRef.current) {\r\n          wheelRef.current.style.transform = `rotateX(${tiltRef.current}deg) rotateY(${rotationRef.current}deg)`;\r\n        }\r\n\r\n        animationFrameRef.current = requestAnimationFrame(animate);\r\n      };\r\n\r\n      animationFrameRef.current = requestAnimationFrame(animate);\r\n\r\n      return () => {\r\n        if (animationFrameRef.current) {\r\n          cancelAnimationFrame(animationFrameRef.current);\r\n        }\r\n      };\r\n    }, []);\r\n\r\n    const handleDragStart = useCallback((clientX: number) => {\r\n      lastInteractionRef.current = Date.now();\r\n      isDraggingRef.current = true;\r\n      velocityRef.current = 0;\r\n      dragStartRef.current = clientX;\r\n      initialRotationRef.current = rotationRef.current;\r\n    }, []);\r\n\r\n    const handleDragMove = useCallback((clientX: number) => {\r\n      if (!isDraggingRef.current) return;\r\n      lastInteractionRef.current = Date.now();\r\n\r\n      const deltaX = clientX - dragStartRef.current;\r\n      const newRotation = initialRotationRef.current + deltaX * DRAG_SENSITIVITY;\r\n\r\n      velocityRef.current = newRotation - rotationRef.current;\r\n      rotationRef.current = newRotation;\r\n    }, []);\r\n\r\n    // Handle drag end\r\n    const handleDragEnd = useCallback(() => {\r\n      isDraggingRef.current = false;\r\n      lastInteractionRef.current = Date.now();\r\n    }, []);\r\n\r\n    // Event listeners for mouse and touch\r\n    const onMouseDown = (e: React.MouseEvent) => handleDragStart(e.clientX);\r\n    const onMouseMove = (e: React.MouseEvent) => handleDragMove(e.clientX);\r\n    const onTouchStart = (e: React.TouchEvent) => handleDragStart(e.touches[0].clientX);\r\n    const onTouchMove = (e: React.TouchEvent) => handleDragMove(e.touches[0].clientX);\r\n\r\n    /* Pre-compute card transforms (only re-computes if images/radius change) */\r\n    const cards = useMemo(\r\n      () =>\r\n        images.map((src, idx) => {\r\n          const angle = (idx * 360) / images.length;\r\n          return {\r\n            key: idx,\r\n            src,\r\n            transform: `rotateY(${angle}deg) translateZ(${radius}px)`,\r\n          };\r\n        }),\r\n      [images, radius]\r\n    );\r\n\r\n    return (\r\n      <div\r\n        ref={parentRef}\r\n        className=\"w-full h-full flex items-center justify-center overflow-hidden font-sans cursor-grab active:cursor-grabbing\"\r\n        style={{ userSelect: 'none' }}\r\n        onMouseDown={onMouseDown}\r\n        onMouseMove={onMouseMove}\r\n        onMouseUp={handleDragEnd}\r\n        onMouseLeave={handleDragEnd}\r\n        onTouchStart={onTouchStart}\r\n        onTouchMove={onTouchMove}\r\n        onTouchEnd={handleDragEnd}\r\n      >\r\n        <div\r\n          className=\"relative\"\r\n          style={{\r\n            perspective: 1500,\r\n            perspectiveOrigin: 'center',\r\n            width: Math.max(cardW * 1.5, radius * 2.2),\r\n            height: Math.max(cardH * 1.8, radius * 1.5),\r\n          }}\r\n        >\r\n          <div\r\n            ref={wheelRef}\r\n            className=\"relative\"\r\n            style={{\r\n              width: cardW,\r\n              height: cardH,\r\n              transformStyle: 'preserve-3d',\r\n              willChange: 'transform',\r\n              position: 'absolute',\r\n              left: '50%',\r\n              top: '50%',\r\n              marginLeft: -cardW / 2,\r\n              marginTop: -cardH / 2,\r\n            }}\r\n          >\r\n            {cards.map(card => (\r\n              <Card\r\n                key={card.key}\r\n                src={card.src}\r\n                transform={card.transform}\r\n                cardW={cardW}\r\n                cardH={cardH}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nThreeDCarousel.displayName = 'ThreeDCarousel';\r\n\r\nexport default ThreeDCarousel;\r\n",
      "type": "registry:ui"
    }
  ]
}