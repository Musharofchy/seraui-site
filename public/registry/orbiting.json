{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "orbiting",
  "title": "Orbiting",
  "description": "A minimalistic orbiting component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "orbiting.tsx",
      "content": "\"use client\"\r\nimport React, { useEffect, useState, memo } from 'react';\r\n\r\n// --- Type Definitions ---\r\ntype IconType = 'html' | 'css' | 'javascript' | 'react' | 'node' | 'tailwind';\r\n\r\ntype GlowColor = 'cyan' | 'purple';\r\n\r\ninterface SkillIconProps {\r\n  type: IconType;\r\n}\r\n\r\ninterface SkillConfig {\r\n  id: string;\r\n  orbitRadius: number;\r\n  size: number;\r\n  speed: number;\r\n  iconType: IconType;\r\n  phaseShift: number;\r\n  glowColor: GlowColor;\r\n  label: string;\r\n}\r\n\r\ninterface OrbitingSkillProps {\r\n  config: SkillConfig;\r\n  angle: number;\r\n}\r\n\r\ninterface GlowingOrbitPathProps {\r\n  radius: number;\r\n  glowColor?: GlowColor;\r\n  animationDelay?: number;\r\n}\r\n\r\n// --- Improved SVG Icon Components ---\r\nconst iconComponents: Record<IconType, { component: () => React.JSX.Element; color: string }> = {\r\n  html: {\r\n    component: () => (\r\n      <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" className=\"w-full h-full\">\r\n        <path d=\"M1.5 0h21l-1.91 21.563L11.977 24l-8.564-2.438L1.5 0zm7.031 9.75l-.232-2.718 10.059.003.23-2.622L5.412 4.41l.698 8.01h9.126l-.326 3.426-2.91.804-2.955-.81-.188-2.11H6.248l.33 4.171L12 19.351l5.379-1.443.744-8.157H8.531z\" fill=\"#E34F26\"/>\r\n      </svg>\r\n    ),\r\n    color: '#E34F26'\r\n  },\r\n  css: {\r\n    component: () => (\r\n      <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" className=\"w-full h-full\">\r\n        <path d=\"M1.5 0h21l-1.91 21.563L11.977 24l-8.565-2.438L1.5 0zm17.09 4.413L5.41 4.41l.213 2.622 10.125.002-.255 2.716h-6.64l.24 2.573h6.182l-.366 3.523-2.91.804-2.956-.81-.188-2.11h-2.61l.29 3.751L12 19.351l5.379-1.443.744-8.157z\" fill=\"#1572B6\"/>\r\n      </svg>\r\n    ),\r\n    color: '#1572B6'\r\n  },\r\n  javascript: {\r\n    component: () => (\r\n      <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" className=\"w-full h-full\">\r\n        <rect width=\"24\" height=\"24\" fill=\"#F7DF1E\"/>\r\n        <path d=\"M22.034 18.276c-.175-1.095-.888-2.015-3.003-2.873-.736-.345-1.554-.585-1.797-1.14-.091-.33-.105-.51-.046-.705.15-.646.915-.84 1.515-.66.39.12.75.42.976.9 1.034-.676 1.034-.676 1.755-1.125-.27-.42-.404-.601-.586-.78-.63-.705-1.469-1.065-2.834-1.034l-.705.089c-.676.165-1.32.525-1.71 1.005-1.14 1.291-.811 3.541.569 4.471 1.365 1.02 3.361 1.244 3.616 2.205.24 1.17-.87 1.545-1.966 1.41-.811-.18-1.26-.586-1.755-1.336l-1.83 1.051c.21.48.45.689.81 1.109 1.74 1.756 6.09 1.666 6.871-1.004.029-.09.24-.705.074-1.65l.046.067zm-8.983-7.245h-2.248c0 1.938-.009 3.864-.009 5.805 0 1.232.063 2.363-.138 2.711-.33.689-1.18.601-1.566.48-.396-.196-.597-.466-.83-.855-.063-.105-.11-.196-.127-.196l-1.825 1.125c.305.63.75 1.172 1.324 1.517.855.51 2.004.675 3.207.405.783-.226 1.458-.691 1.811-1.411.51-.93.402-2.07.397-3.346.012-2.054 0-4.109 0-6.179l.004-.056z\" fill=\"#323330\"/>\r\n      </svg>\r\n    ),\r\n    color: '#F7DF1E'\r\n  },\r\n  react: {\r\n    component: () => (\r\n      <svg viewBox=\"0 0 24 24\" fill=\"none\" className=\"w-full h-full\">\r\n        <g stroke=\"#61DAFB\" strokeWidth=\"1\" fill=\"none\">\r\n          <circle cx=\"12\" cy=\"12\" r=\"2.05\" fill=\"#61DAFB\"/>\r\n          <ellipse cx=\"12\" cy=\"12\" rx=\"11\" ry=\"4.2\"/>\r\n          <ellipse cx=\"12\" cy=\"12\" rx=\"11\" ry=\"4.2\" transform=\"rotate(60 12 12)\"/>\r\n          <ellipse cx=\"12\" cy=\"12\" rx=\"11\" ry=\"4.2\" transform=\"rotate(120 12 12)\"/>\r\n        </g>\r\n      </svg>\r\n    ),\r\n    color: '#61DAFB'\r\n  },\r\n  node: {\r\n    component: () => (\r\n      <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" className=\"w-full h-full\">\r\n        <path d=\"M11.998 24c-.321 0-.641-.084-.922-.247l-2.936-1.737c-.438-.245-.224-.332-.08-.383.585-.203.703-.25 1.328-.602.065-.037.151-.023.218.017l2.256 1.339c.082.045.198.045.275 0l8.795-5.076c.082-.047.135-.141.135-.241V6.921c0-.103-.055-.198-.137-.246l-8.791-5.072c-.081-.047-.189-.047-.273 0L2.075 6.675c-.084.048-.139.144-.139.246v10.146c0 .1.055.194.139.241l2.409 1.392c1.307.654 2.108-.116 2.108-.89V7.787c0-.142.114-.253.256-.253h1.115c.139 0 .255.112.255.253v10.021c0 1.745-.95 2.745-2.604 2.745-.508 0-.909 0-2.026-.551L1.352 18.675C.533 18.215 0 17.352 0 16.43V6.284c0-.922.533-1.786 1.352-2.245L10.147-.963c.8-.452 1.866-.452 2.657 0l8.796 5.002c.819.459 1.352 1.323 1.352 2.245v10.146c0 .922-.533 1.783-1.352 2.245l-8.796 5.078c-.28.163-.601.247-.926.247zm2.717-6.993c-3.849 0-4.654-1.766-4.654-3.246 0-.14.114-.253.256-.253h1.136c.127 0 .232.091.252.215.173 1.164.686 1.752 3.01 1.752 1.852 0 2.639-.419 2.639-1.401 0-.566-.224-1.03-3.099-1.249-2.404-.184-3.89-.768-3.89-2.689 0-1.771 1.491-2.825 3.991-2.825 2.808 0 4.199.975 4.377 3.068.007.072-.019.141-.065.193-.047.049-.111.077-.178.077h-1.14c-.119 0-.225-.083-.248-.196-.276-1.224-.944-1.616-2.746-1.616-2.023 0-2.259.705-2.259 1.234 0 .641.278.827 3.006 1.19 2.7.359 3.982.866 3.982 2.771 0 1.922-1.603 3.024-4.399 3.024z\" fill=\"#339933\"/>\r\n      </svg>\r\n    ),\r\n    color: '#339933'\r\n  },\r\n  tailwind: {\r\n    component: () => (\r\n      <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" className=\"w-full h-full\">\r\n        <path d=\"M12.001 4.8c-3.2 0-5.2 1.6-6 4.8 1.2-1.6 2.6-2.2 4.2-1.8.913.228 1.565.89 2.288 1.624C13.666 10.618 15.027 12 18.001 12c3.2 0 5.2-1.6 6-4.8-1.2 1.6-2.6 2.2-4.2 1.8-.913-.228-1.565-.89-2.288-1.624C16.337 6.182 14.976 4.8 12.001 4.8zm-6 7.2c-3.2 0-5.2 1.6-6 4.8 1.2-1.6 2.6-2.2 4.2-1.8.913.228 1.565.89 2.288 1.624 1.177 1.194 2.538 2.576 5.512 2.576 3.2 0 5.2-1.6 6-4.8-1.2 1.6-2.6 2.2-4.2 1.8-.913-.228-1.565-.89-2.288-1.624C10.337 13.382 8.976 12 6.001 12z\" fill=\"#06B6D4\"/>\r\n      </svg>\r\n    ),\r\n    color: '#06B6D4'\r\n  }\r\n};\r\n\r\n// --- Memoized Icon Component ---\r\nconst SkillIcon = memo(({ type }: SkillIconProps) => {\r\n  const IconComponent = iconComponents[type]?.component;\r\n  return IconComponent ? <IconComponent /> : null;\r\n});\r\nSkillIcon.displayName = 'SkillIcon';\r\n\r\n// --- Configuration for the Orbiting Skills ---\r\nconst skillsConfig: SkillConfig[] = [\r\n  // Inner Orbit\r\n  { \r\n    id: 'html',\r\n    orbitRadius: 100, \r\n    size: 40, \r\n    speed: 1, \r\n    iconType: 'html', \r\n    phaseShift: 0, \r\n    glowColor: 'cyan',\r\n    label: 'HTML5'\r\n  },\r\n  { \r\n    id: 'css',\r\n    orbitRadius: 100, \r\n    size: 45, \r\n    speed: 1, \r\n    iconType: 'css', \r\n    phaseShift: (2 * Math.PI) / 3, \r\n    glowColor: 'cyan',\r\n    label: 'CSS3'\r\n  },\r\n  { \r\n    id: 'javascript',\r\n    orbitRadius: 100, \r\n    size: 40, \r\n    speed: 1, \r\n    iconType: 'javascript', \r\n    phaseShift: (4 * Math.PI) / 3, \r\n    glowColor: 'cyan',\r\n    label: 'JavaScript'\r\n  },\r\n  // Outer Orbit\r\n  { \r\n    id: 'react',\r\n    orbitRadius: 180, \r\n    size: 50, \r\n    speed: -0.6, \r\n    iconType: 'react', \r\n    phaseShift: 0, \r\n    glowColor: 'purple',\r\n    label: 'React'\r\n  },\r\n  { \r\n    id: 'node',\r\n    orbitRadius: 180, \r\n    size: 45, \r\n    speed: -0.6, \r\n    iconType: 'node', \r\n    phaseShift: (2 * Math.PI) / 3, \r\n    glowColor: 'purple',\r\n    label: 'Node.js'\r\n  },\r\n  { \r\n    id: 'tailwind',\r\n    orbitRadius: 180, \r\n    size: 40, \r\n    speed: -0.6, \r\n    iconType: 'tailwind', \r\n    phaseShift: (4 * Math.PI) / 3, \r\n    glowColor: 'purple',\r\n    label: 'Tailwind CSS'\r\n  },\r\n];\r\n\r\n// --- Memoized Orbiting Skill Component ---\r\nconst OrbitingSkill = memo(({ config, angle }: OrbitingSkillProps) => {\r\n  const [isHovered, setIsHovered] = useState(false);\r\n  const { orbitRadius, size, iconType, label } = config;\r\n\r\n  const x = Math.cos(angle) * orbitRadius;\r\n  const y = Math.sin(angle) * orbitRadius;\r\n\r\n  return (\r\n    <div\r\n      className=\"absolute top-1/2 left-1/2 transition-all duration-300 ease-out\"\r\n      style={{\r\n        width: `${size}px`,\r\n        height: `${size}px`,\r\n        transform: `translate(calc(${x}px - 50%), calc(${y}px - 50%))`,\r\n        zIndex: isHovered ? 20 : 10,\r\n      }}\r\n      onMouseEnter={() => setIsHovered(true)}\r\n      onMouseLeave={() => setIsHovered(false)}\r\n    >\r\n      <div\r\n        className={`\r\n          relative w-full h-full p-2 bg-gray-800/90 backdrop-blur-sm\r\n          rounded-full flex items-center justify-center\r\n          transition-all duration-300 cursor-pointer\r\n          ${isHovered ? 'scale-125 shadow-2xl' : 'shadow-lg hover:shadow-xl'}\r\n        `}\r\n        style={{\r\n          boxShadow: isHovered\r\n            ? `0 0 30px ${iconComponents[iconType]?.color}40, 0 0 60px ${iconComponents[iconType]?.color}20`\r\n            : undefined\r\n        }}\r\n      >\r\n        <SkillIcon type={iconType} />\r\n        {isHovered && (\r\n          <div className=\"absolute -bottom-8 left-1/2 -translate-x-1/2 px-2 py-1 bg-gray-900/95 backdrop-blur-sm rounded text-xs text-white whitespace-nowrap pointer-events-none\">\r\n            {label}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\nOrbitingSkill.displayName = 'OrbitingSkill';\r\n\r\n// --- Optimized Orbit Path Component ---\r\nconst GlowingOrbitPath = memo(({ radius, glowColor = 'cyan', animationDelay = 0 }: GlowingOrbitPathProps) => {\r\n  const glowColors = {\r\n    cyan: {\r\n      primary: 'rgba(6, 182, 212, 0.4)',\r\n      secondary: 'rgba(6, 182, 212, 0.2)',\r\n      border: 'rgba(6, 182, 212, 0.3)'\r\n    },\r\n    purple: {\r\n      primary: 'rgba(147, 51, 234, 0.4)',\r\n      secondary: 'rgba(147, 51, 234, 0.2)',\r\n      border: 'rgba(147, 51, 234, 0.3)'\r\n    }\r\n  };\r\n\r\n  const colors = glowColors[glowColor] || glowColors.cyan;\r\n\r\n  return (\r\n    <div\r\n      className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 rounded-full pointer-events-none\"\r\n      style={{\r\n        width: `${radius * 2}px`,\r\n        height: `${radius * 2}px`,\r\n        animationDelay: `${animationDelay}s`,\r\n      }}\r\n    >\r\n      {/* Glowing background */}\r\n      <div\r\n        className=\"absolute inset-0 rounded-full animate-pulse\"\r\n        style={{\r\n          background: `radial-gradient(circle, transparent 30%, ${colors.secondary} 70%, ${colors.primary} 100%)`,\r\n          boxShadow: `0 0 60px ${colors.primary}, inset 0 0 60px ${colors.secondary}`,\r\n          animation: 'pulse 4s ease-in-out infinite',\r\n          animationDelay: `${animationDelay}s`,\r\n        }}\r\n      />\r\n\r\n      {/* Static ring for depth */}\r\n      <div\r\n        className=\"absolute inset-0 rounded-full\"\r\n        style={{\r\n          border: `1px solid ${colors.border}`,\r\n          boxShadow: `inset 0 0 20px ${colors.secondary}`,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n});\r\nGlowingOrbitPath.displayName = 'GlowingOrbitPath';\r\n\r\n// --- Main App Component ---\r\nexport default function OrbitingSkills() {\r\n  const [time, setTime] = useState(0);\r\n  const [isPaused, setIsPaused] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isPaused) return;\r\n\r\n    let animationFrameId: number;\r\n    let lastTime = performance.now();\r\n\r\n    const animate = (currentTime: number) => {\r\n      const deltaTime = (currentTime - lastTime) / 1000;\r\n      lastTime = currentTime;\r\n\r\n      setTime(prevTime => prevTime + deltaTime);\r\n      animationFrameId = requestAnimationFrame(animate);\r\n    };\r\n\r\n    animationFrameId = requestAnimationFrame(animate);\r\n    return () => cancelAnimationFrame(animationFrameId);\r\n  }, [isPaused]);\r\n\r\n  const orbitConfigs: Array<{ radius: number; glowColor: GlowColor; delay: number }> = [\r\n    { radius: 100, glowColor: 'cyan', delay: 0 },\r\n    { radius: 180, glowColor: 'purple', delay: 1.5 }\r\n  ];\r\n\r\n  return (\r\n    <main className=\"w-full flex items-center justify-center overflow-hidden\">\r\n      {/* Background pattern */}\r\n      <div className=\"absolute inset-0 opacity-10\">\r\n        <div \r\n          className=\"absolute inset-0\" \r\n          style={{\r\n            backgroundImage: `radial-gradient(circle at 25% 25%, #374151 0%, transparent 50%),\r\n                             radial-gradient(circle at 75% 75%, #4B5563 0%, transparent 50%)`,\r\n          }}\r\n        />\r\n      </div>\r\n\r\n      <div \r\n        className=\"relative w-[calc(100vw-40px)] h-[calc(100vw-40px)] md:w-[450px] md:h-[450px] flex items-center justify-center\"\r\n        onMouseEnter={() => setIsPaused(true)}\r\n        onMouseLeave={() => setIsPaused(false)}\r\n      >\r\n        \r\n        {/* Central \"Code\" Icon with enhanced glow */}\r\n        <div className=\"w-20 h-20 bg-gradient-to-br from-gray-700 to-gray-900 rounded-full flex items-center justify-center z-10 relative shadow-2xl\">\r\n          <div className=\"absolute inset-0 rounded-full bg-cyan-500/30 blur-xl animate-pulse\"></div>\r\n          <div className=\"absolute inset-0 rounded-full bg-purple-500/20 blur-2xl animate-pulse\" style={{ animationDelay: '1s' }}></div>\r\n          <div className=\"relative z-10\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"36\" height=\"36\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"url(#gradient)\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\r\n              <defs>\r\n                <linearGradient id=\"gradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\r\n                  <stop offset=\"0%\" stopColor=\"#06B6D4\" />\r\n                  <stop offset=\"100%\" stopColor=\"#9333EA\" />\r\n                </linearGradient>\r\n              </defs>\r\n              <polyline points=\"16 18 22 12 16 6\"></polyline>\r\n              <polyline points=\"8 6 2 12 8 18\"></polyline>\r\n            </svg>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Render glowing orbit paths */}\r\n        {orbitConfigs.map((config) => (\r\n          <GlowingOrbitPath\r\n            key={`path-${config.radius}`}\r\n            radius={config.radius}\r\n            glowColor={config.glowColor}\r\n            animationDelay={config.delay}\r\n          />\r\n        ))}\r\n\r\n        {/* Render orbiting skill icons */}\r\n        {skillsConfig.map((config) => {\r\n          const angle = time * config.speed + (config.phaseShift || 0);\r\n          return (\r\n            <OrbitingSkill\r\n              key={config.id}\r\n              config={config}\r\n              angle={angle}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </main>\r\n  );\r\n}",
      "type": "registry:ui"
    }
  ]
}