{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "combo-box",
  "title": "Combo Box",
  "description": "A minimalistic combo box component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "combo-box.tsx",
      "content": "\"use client\";\r\nimport ComboBox from \"./combo-box\";\r\n\r\nconst ComboBoxView = () => {\r\n    \r\n  const sampleOptions = [\r\n    \"React.js\",\r\n    \"Vue.js\",\r\n    \"Angular\",\r\n    \"Svelte\",\r\n    \"Ember.js\",\r\n    \"Backbone.js\",\r\n    \"jQuery\",\r\n    \"Bootstrap\",\r\n    \"Tailwind CSS\",\r\n    \"Material UI\",\r\n    \"Ant Design\",\r\n    \"Chakra UI\",\r\n    \"Bulma\",\r\n    \"Foundation\",\r\n    \"Semantic UI\",\r\n    \"UIKit\",\r\n    \"PrimeReact\",\r\n    \"Grommet\",\r\n    \"Fluent UI\",\r\n    \"Rebass\",\r\n  ];\r\n\r\n  const handleSelect = (option: string | null) => {\r\n    console.log(\"Selected option:\", option);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-8\">\r\n      <p className=\"text-lg font-bold mb-6\">Combo Box Component</p>\r\n      <ComboBox\r\n        options={sampleOptions}\r\n        placeholder=\"Search fruits...\"\r\n        onSelect={handleSelect}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComboBoxView;\r\n",
      "type": "registry:ui"
    },
    {
      "path": "combo-box.tsx",
      "content": "\"use client\";\r\n\r\nimport { useState, useRef, useEffect } from \"react\";\r\n\r\ninterface ComboBoxProps {\r\n  options: string[];\r\n  placeholder?: string;\r\n  onSelect?: (option: string | null) => void;\r\n}\r\n\r\nconst ComboBox = ({\r\n  options = [],\r\n  placeholder = \"Select an option...\",\r\n  onSelect,\r\n}: ComboBoxProps) => {\r\n    \r\n  const [inputValue, setInputValue] = useState<string>(\"\");\r\n  const [isOpen, setIsOpen] = useState<boolean>(false);\r\n  const [selectedOption, setSelectedOption] = useState<string | null>(null);\r\n  const [filteredOptions, setFilteredOptions] = useState<string[]>(options);\r\n  const [highlightedIndex, setHighlightedIndex] = useState<number>(-1);\r\n\r\n  const comboBoxRef = useRef<HTMLDivElement>(null);\r\n  const optionRefs = useRef<(HTMLButtonElement | null)[]>([]);\r\n\r\n  useEffect(() => {\r\n    if (inputValue === \"\") {\r\n      setFilteredOptions(options);\r\n    } else {\r\n      setFilteredOptions(\r\n        options.filter((option) =>\r\n          option.toLowerCase().includes(inputValue.toLowerCase())\r\n        )\r\n      );\r\n    }\r\n    setHighlightedIndex(-1); // Reset highlighted index when filtering\r\n    // Reset option refs array\r\n    optionRefs.current = [];\r\n  }, [inputValue, options]);\r\n\r\n  // Scroll to highlighted option\r\n  useEffect(() => {\r\n    if (highlightedIndex >= 0 && optionRefs.current[highlightedIndex]) {\r\n      optionRefs.current[highlightedIndex]?.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"nearest\",\r\n      });\r\n    }\r\n  }, [highlightedIndex]);\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        comboBoxRef.current &&\r\n        !comboBoxRef.current.contains(event.target as Node)\r\n      ) {\r\n        setIsOpen(false);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, []);\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setInputValue(e.target.value);\r\n    setIsOpen(true);\r\n    setSelectedOption(null);\r\n    setHighlightedIndex(-1);\r\n  };\r\n\r\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (!isOpen && (e.key === \"ArrowDown\" || e.key === \"ArrowUp\")) {\r\n      setIsOpen(true);\r\n      if (filteredOptions.length > 0) {\r\n        setHighlightedIndex(\r\n          e.key === \"ArrowDown\" ? 0 : filteredOptions.length - 1\r\n        );\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (!isOpen) return;\r\n\r\n    switch (e.key) {\r\n      case \"ArrowDown\":\r\n        e.preventDefault();\r\n        if (filteredOptions.length > 0) {\r\n          setHighlightedIndex((prev) =>\r\n            prev < filteredOptions.length - 1 ? prev + 1 : 0\r\n          );\r\n        }\r\n        break;\r\n      case \"ArrowUp\":\r\n        e.preventDefault();\r\n        if (filteredOptions.length > 0) {\r\n          setHighlightedIndex((prev) =>\r\n            prev > 0 ? prev - 1 : filteredOptions.length - 1\r\n          );\r\n        }\r\n        break;\r\n      case \"Enter\":\r\n        e.preventDefault();\r\n        if (\r\n          highlightedIndex >= 0 &&\r\n          highlightedIndex < filteredOptions.length\r\n        ) {\r\n          handleOptionSelect(filteredOptions[highlightedIndex]);\r\n        }\r\n        break;\r\n      case \"Escape\":\r\n        e.preventDefault();\r\n        setIsOpen(false);\r\n        setHighlightedIndex(-1);\r\n        break;\r\n      case \"Tab\":\r\n        setIsOpen(false);\r\n        setHighlightedIndex(-1);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handleOptionSelect = (option: string) => {\r\n    setSelectedOption(option);\r\n    setInputValue(option);\r\n    setIsOpen(false);\r\n    setHighlightedIndex(-1);\r\n    onSelect?.(option);\r\n  };\r\n\r\n  const handleInputFocus = () => {\r\n    setIsOpen(true);\r\n  };\r\n\r\n  const handleClearSelection = () => {\r\n    setInputValue(\"\");\r\n    setSelectedOption(null);\r\n    setIsOpen(false);\r\n    setHighlightedIndex(-1);\r\n    onSelect?.(null);\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative w-full max-w-md\" ref={comboBoxRef}>\r\n      <div className=\"relative\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={handleInputChange}\r\n          onFocus={handleInputFocus}\r\n          onKeyDown={handleKeyDown}\r\n          placeholder={placeholder}\r\n          className=\"w-full px-4 py-2 pr-20 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-transparent placeholder-gray-500 dark:placeholder-gray-400\"\r\n          role=\"combobox\"\r\n          aria-expanded={isOpen}\r\n          aria-haspopup=\"listbox\"\r\n          aria-controls=\"combobox-options\"\r\n          aria-autocomplete=\"list\"\r\n          aria-activedescendant={\r\n            highlightedIndex >= 0 ? `option-${highlightedIndex}` : undefined\r\n          }\r\n        />\r\n        {selectedOption && (\r\n          <button\r\n            type=\"button\"\r\n            onClick={handleClearSelection}\r\n            className=\"absolute right-8 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\r\n            aria-label=\"Clear selection\"\r\n          >\r\n            <svg\r\n              className=\"w-4 h-4\"\r\n              fill=\"none\"\r\n              stroke=\"currentColor\"\r\n              viewBox=\"0 0 24 24\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M6 18L18 6M6 6l12 12\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        )}\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => setIsOpen(!isOpen)}\r\n          className=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-300 transition-colors\"\r\n          aria-label=\"Toggle dropdown\"\r\n        >\r\n          <svg\r\n            className={`w-5 h-5 transition-transform ${isOpen ? \"rotate-180\" : \"\"}`}\r\n            fill=\"none\"\r\n            stroke=\"currentColor\"\r\n            viewBox=\"0 0 24 24\"\r\n          >\r\n            <path\r\n              strokeLinecap=\"round\"\r\n              strokeLinejoin=\"round\"\r\n              strokeWidth={2}\r\n              d=\"M19 9l-7 7-7-7\"\r\n            />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n\r\n      {isOpen && (\r\n        <div\r\n          id=\"combobox-options\"\r\n          className=\"absolute z-10 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg shadow-lg max-h-60 overflow-y-scroll\"\r\n          role=\"listbox\"\r\n        >\r\n          {filteredOptions.length > 0 ? (\r\n            filteredOptions.map((option, index) => (\r\n              <button\r\n                key={index}\r\n                ref={(el) => {\r\n                  optionRefs.current[index] = el;\r\n                }}\r\n                id={`option-${index}`}\r\n                onClick={() => handleOptionSelect(option)}\r\n                className={`w-full px-4 py-2 text-left focus:outline-none first:rounded-t-lg last:rounded-b-lg transition-colors ${\r\n                  index === highlightedIndex\r\n                    ? \"bg-blue-100 dark:bg-blue-900/20 text-blue-900 dark:text-blue-300\"\r\n                    : \"text-gray-900 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-700 focus:bg-gray-50 dark:focus:bg-gray-700\"\r\n                }`}\r\n                role=\"option\"\r\n                aria-selected={selectedOption === option}\r\n                onMouseEnter={() => setHighlightedIndex(index)}\r\n              >\r\n                {option}\r\n              </button>\r\n            ))\r\n          ) : (\r\n            <div\r\n              className=\"px-4 py-2 text-gray-500 dark:text-gray-400\"\r\n              role=\"status\"\r\n            >\r\n              No options found\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ComboBox;\r\n",
      "type": "registry:ui"
    }
  ]
}