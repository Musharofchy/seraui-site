{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "modal",
  "title": "modal",
  "description": "A minimalistic modal component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "registry/seraui/modal.tsx",
       "content": "import React, { ReactNode, useEffect } from \"react\";\nimport { createPortal } from \"react-dom\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: ReactNode;\n  title?: string;\n  size?: \"sm\" | \"md\" | \"lg\" | \"xl\";\n  animation?: \"scale\" | \"slide\" | \"fade\" | \"bounce\";\n}\n\nconst Modal: React.FC<ModalProps> = ({\n  isOpen,\n  onClose,\n  children,\n  title,\n  size = \"md\",\n  animation = \"scale\",\n}) => {\n  // Animation variants based on animation type\n  const getModalVariants = (animationType: string) => {\n    switch (animationType) {\n      case \"scale\":\n        return {\n          hidden: { opacity: 0, scale: 0.75, y: 20 },\n          visible: {\n            opacity: 1,\n            scale: 1,\n            y: 0,\n            transition: {\n              type: \"spring\" as const,\n              damping: 25,\n              stiffness: 300,\n            },\n          },\n          exit: {\n            opacity: 0,\n            scale: 0.75,\n            y: 20,\n            transition: { duration: 0.2 },\n          },\n        };\n\n      case \"slide\":\n        return {\n          hidden: { opacity: 0, y: -50, scale: 0.95 },\n          visible: {\n            opacity: 1,\n            y: 0,\n            scale: 1,\n            transition: {\n              type: \"spring\" as const,\n              damping: 20,\n              stiffness: 300,\n            },\n          },\n          exit: {\n            opacity: 0,\n            y: -30,\n            scale: 0.95,\n            transition: { duration: 0.2 },\n          },\n        };\n\n      case \"fade\":\n        return {\n          hidden: { opacity: 0 },\n          visible: {\n            opacity: 1,\n            transition: { duration: 0.3, ease: \"easeOut\" as const },\n          },\n          exit: {\n            opacity: 0,\n            transition: { duration: 0.2 },\n          },\n        };\n\n      case \"bounce\":\n        return {\n          hidden: { opacity: 0, scale: 0.3, rotate: -10 },\n          visible: {\n            opacity: 1,\n            scale: 1,\n            rotate: 0,\n            transition: {\n              type: \"spring\" as const,\n              damping: 15,\n              stiffness: 400,\n              bounce: 0.6,\n            },\n          },\n          exit: {\n            opacity: 0,\n            scale: 0.3,\n            rotate: 10,\n            transition: { duration: 0.2 },\n          },\n        };\n\n      default:\n        return {\n          hidden: { opacity: 0, scale: 0.75, y: 20 },\n          visible: {\n            opacity: 1,\n            scale: 1,\n            y: 0,\n            transition: {\n              type: \"spring\" as const,\n              damping: 25,\n              stiffness: 300,\n            },\n          },\n          exit: {\n            opacity: 0,\n            scale: 0.75,\n            y: 20,\n            transition: { duration: 0.2 },\n          },\n        };\n    }\n  };\n\n  const backdropVariants = {\n    hidden: { opacity: 0 },\n    visible: { opacity: 1 },\n    exit: { opacity: 0 },\n  };\n\n  const modalVariants = getModalVariants(animation);\n  // Handle body scroll and pointer events\n  useEffect(() => {\n    if (isOpen) {\n      // Store original values\n      const originalOverflow = document.body.style.overflow;\n      const originalPointerEvents = document.body.style.pointerEvents;\n\n      // Apply modal styles\n      document.body.style.overflow = \"hidden\";\n      document.body.style.pointerEvents = \"none\";\n\n      // Cleanup on modal close or unmount\n      return () => {\n        document.body.style.overflow = originalOverflow || \"\";\n        document.body.style.pointerEvents = originalPointerEvents || \"\";\n      };\n    }\n  }, [isOpen]);\n\n  // Handle escape key - only when modal is open\n  useEffect(() => {\n    if (!isOpen) return; // Early return if modal is closed\n\n    const handleEscape = (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        onClose();\n      }\n    };\n\n    // Add listener only when modal is open\n    document.addEventListener(\"keydown\", handleEscape);\n\n    // Cleanup when modal closes or component unmounts\n    return () => document.removeEventListener(\"keydown\", handleEscape);\n  }, [isOpen, onClose]);\n\n  if (!isOpen) return null;\n\n  const sizeClasses = {\n    sm: \"max-w-md\",\n    md: \"max-w-lg\",\n    lg: \"max-w-2xl\",\n    xl: \"max-w-4xl\",\n  };\n\n  return createPortal(\n    <AnimatePresence>\n      {isOpen && (\n        <motion.div\n          className=\"fixed inset-0 z-[9999] flex items-center justify-center pointer-events-auto\"\n          initial=\"hidden\"\n          animate=\"visible\"\n          exit=\"exit\"\n          variants={backdropVariants}\n          transition={{ duration: 0.2 }}\n        >\n          {/* Backdrop */}\n          <motion.div\n            className={cn(\n              \"absolute inset-0 backdrop-blur-sm\",\n              \"bg-black/50 dark:bg-black/70\"\n            )}\n            onClick={onClose}\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          />\n\n          {/* Modal Content */}\n          <motion.div\n            className={cn(\n              \"relative rounded-lg shadow-xl w-full mx-4 max-h-[90vh] overflow-auto\",\n              \"bg-white dark:bg-gray-900\",\n              \"border-0 dark:border dark:border-gray-700\",\n              sizeClasses[size]\n            )}\n            variants={modalVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n          >\n            {title && (\n              <div\n                className={cn(\n                  \"flex items-center justify-between p-4 border-b\",\n                  \"border-gray-200 dark:border-gray-700\"\n                )}\n              >\n                <h3\n                  className={cn(\n                    \"text-lg font-semibold\",\n                    \"text-gray-900 dark:text-white\"\n                  )}\n                >\n                  {title}\n                </h3>\n                <button\n                  onClick={onClose}\n                  className={cn(\n                    \"p-1 rounded-md transition-colors\",\n                    \"text-gray-400 hover:text-gray-600\",\n                    \"dark:text-gray-400 dark:hover:text-gray-200\",\n                    \"hover:bg-gray-100 dark:hover:bg-gray-800\"\n                  )}\n                >\n                  <svg\n                    className=\"w-5 h-5\"\n                    fill=\"none\"\n                    stroke=\"currentColor\"\n                    viewBox=\"0 0 24 24\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M6 18L18 6M6 6l12 12\"\n                    />\n                  </svg>\n                </button>\n              </div>\n            )}\n\n            <div className=\"p-4\">{children}</div>\n          </motion.div>\n        </motion.div>\n      )}\n    </AnimatePresence>,\n    document.body\n  );\n};\n\nexport default Modal;\n",
      "type": "registry:ui"
    }
  ]
}