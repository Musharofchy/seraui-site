{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "threed-card",
  "title": "Threed Card",
  "description": "A minimalistic threed card component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "threed-card.tsx",
      "content": "import ThreeDCard from './threed-card';\r\n\r\nexport default function ThreedcardVew() {\r\n  return (\r\n    <div className=\"font-sans text-white p-4\">\r\n      <ThreeDCard>\r\n        <img\r\n          src=\"https://i.pinimg.com/736x/17/b2/19/17b2199dcec49a9613da56cadc928af4.jpg\"\r\n          alt=\"Card content\"\r\n          className=\"w-full h-full object-cover rounded-2xl\"\r\n        />\r\n      </ThreeDCard>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:ui"
    },
    {
      "path": "threed-card.tsx",
      "content": "'use client';\r\nimport React, { useState, useRef, useCallback, ReactNode, CSSProperties } from 'react';\r\n\r\ninterface ThreeDCardProps {\r\n  children: ReactNode;\r\n  className?: string;\r\n  maxRotation?: number;\r\n  glowOpacity?: number;\r\n  shadowBlur?: number;\r\n  parallaxOffset?: number;\r\n  transitionDuration?: string;\r\n  backgroundImage?: string | null;\r\n  enableGlow?: boolean;\r\n  enableShadow?: boolean;\r\n  enableParallax?: boolean;\r\n}\r\n\r\nfunction ThreeDCard({\r\n  children,\r\n  className = '',\r\n  maxRotation = 10,\r\n  glowOpacity = 0.2,\r\n  shadowBlur = 30,\r\n  parallaxOffset = 40,\r\n  transitionDuration = '0.6s',\r\n  backgroundImage = null,\r\n  enableGlow = true,\r\n  enableShadow = true,\r\n  enableParallax = true,\r\n}: ThreeDCardProps) {\r\n  const cardRef = useRef<HTMLDivElement>(null);\r\n\r\n  const [transform, setTransform] = useState({\r\n    rotateX: 0,\r\n    rotateY: 0,\r\n    glowX: 50,\r\n    glowY: 50,\r\n    shadowX: 0,\r\n    shadowY: 20,\r\n    isHovered: false,\r\n  });\r\n\r\n  const handleMouseMove = useCallback(\r\n    (e: React.MouseEvent<HTMLDivElement>) => {\r\n      if (!cardRef.current) return;\r\n\r\n      const rect = cardRef.current.getBoundingClientRect();\r\n      const { width, height, left, top } = rect;\r\n\r\n      const mouseX = e.clientX - left;\r\n      const mouseY = e.clientY - top;\r\n\r\n      const xPct = mouseX / width - 0.5;\r\n      const yPct = mouseY / height - 0.5;\r\n\r\n      const newRotateX = yPct * -1 * maxRotation;\r\n      const newRotateY = xPct * maxRotation;\r\n\r\n      setTransform(prev => ({\r\n        ...prev,\r\n        rotateX: newRotateX,\r\n        rotateY: newRotateY,\r\n        glowX: (mouseX / width) * 100,\r\n        glowY: (mouseY / height) * 100,\r\n        shadowX: enableShadow ? newRotateY * 0.8 : 0,\r\n        shadowY: enableShadow ? 20 - newRotateX * 0.6 : 20,\r\n      }));\r\n    },\r\n    [maxRotation, enableShadow]\r\n  );\r\n\r\n  const handleMouseEnter = useCallback(() => {\r\n    setTransform(prev => ({ ...prev, isHovered: true }));\r\n  }, []);\r\n\r\n  const handleMouseLeave = useCallback(() => {\r\n    setTransform({\r\n      rotateX: 0,\r\n      rotateY: 0,\r\n      glowX: 50,\r\n      glowY: 50,\r\n      shadowX: 0,\r\n      shadowY: 20,\r\n      isHovered: false,\r\n    });\r\n  }, []);\r\n\r\n  const cardStyle: CSSProperties = {\r\n    transform: `perspective(1000px) rotateX(${transform.rotateX}deg) rotateY(${transform.rotateY}deg) scale3d(1, 1, 1)`,\r\n    boxShadow: enableShadow\r\n      ? `${transform.shadowX}px ${transform.shadowY}px ${shadowBlur}px rgba(0, 0, 0, 0.4)`\r\n      : 'none',\r\n    transition: `transform ${transitionDuration} cubic-bezier(0.23, 1, 0.32, 1), box-shadow ${transitionDuration} cubic-bezier(0.23, 1, 0.32, 1)`,\r\n    transformStyle: 'preserve-3d',\r\n  };\r\n\r\n  const backgroundStyle = backgroundImage\r\n    ? {\r\n        backgroundImage: `url(${backgroundImage})`,\r\n        backgroundSize: 'cover',\r\n        backgroundPosition: 'center',\r\n        opacity: transform.isHovered ? 1 : 0,\r\n        transition: `opacity 0.5s ease-in-out`,\r\n      }\r\n    : {};\r\n\r\n  const glowStyle = enableGlow\r\n    ? {\r\n        background: `radial-gradient(circle at ${transform.glowX}% ${transform.glowY}%, rgba(255, 255, 255, ${glowOpacity}), transparent)`,\r\n        opacity: transform.isHovered ? 1 : 0,\r\n        transition: 'opacity 0.5s ease-in-out',\r\n      }\r\n    : {};\r\n\r\n  const contentStyle: CSSProperties = enableParallax\r\n    ? {\r\n        transform: `translateZ(${parallaxOffset}px)`,\r\n        transformStyle: 'preserve-3d',\r\n      }\r\n    : {};\r\n\r\n  return (\r\n    <div style={{ perspective: '1000px' }} className={className}>\r\n      <div\r\n        ref={cardRef}\r\n        onMouseMove={handleMouseMove}\r\n        onMouseEnter={handleMouseEnter}\r\n        onMouseLeave={handleMouseLeave}\r\n        style={cardStyle}\r\n        className=\"relative bg-gray-800 rounded-2xl overflow-hidden\"\r\n        role=\"img\"\r\n        tabIndex={0}\r\n        onFocus={handleMouseEnter}\r\n        onBlur={handleMouseLeave}\r\n      >\r\n        {backgroundImage && (\r\n          <div\r\n            className=\"absolute inset-0 rounded-2xl\"\r\n            style={backgroundStyle}\r\n            aria-hidden=\"true\"\r\n          />\r\n        )}\r\n\r\n        <div\r\n          className=\"absolute inset-0 border-2 border-white/10 rounded-2xl pointer-events-none\"\r\n          aria-hidden=\"true\"\r\n        />\r\n\r\n        {enableGlow && (\r\n          <div\r\n            className=\"absolute inset-0 z-0 rounded-2xl pointer-events-none\"\r\n            style={glowStyle}\r\n            aria-hidden=\"true\"\r\n          />\r\n        )}\r\n\r\n        <div style={contentStyle} className=\"relative z-10\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ThreeDCard;\r\n",
      "type": "registry:ui"
    }
  ]
}