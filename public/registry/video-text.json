{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "video-text",
  "title": "Video Text",
  "description": "A minimalistic video text component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "video-text.tsx",
      "content": "'use client'\r\nimport React, { ElementType, ReactNode, useEffect, useState, useRef, useMemo, useCallback } from \"react\";\r\n\r\n// Improved type-safe class name utility\r\nconst cn = (...inputs: (string | undefined | null | false)[]) => {\r\n  return inputs.filter(Boolean).join(\" \");\r\n};\r\n\r\n\r\nexport interface VideoTextProps {\r\n\r\n  src: string;\r\n  className?: string;\r\n  autoPlay?: boolean;\r\n  muted?: boolean;\r\n  loop?: boolean;\r\n  preload?: \"auto\" | \"metadata\" | \"none\";\r\n  children: ReactNode;\r\n  fontSize?: string | number;\r\n  fontWeight?: string | number;\r\n  textAnchor?: \"start\" | \"middle\" | \"end\";\r\n  dominantBaseline?: \"auto\" | \"middle\" | \"hanging\" | \"alphabetic\" | \"ideographic\" | \"text-bottom\" | \"text-top\";\r\n  fontFamily?: string;\r\n  as?: ElementType;\r\n  letterSpacing?: string | number;\r\n  lineHeight?: string | number;\r\n  textTransform?: \"none\" | \"uppercase\" | \"lowercase\" | \"capitalize\";\r\n  onVideoLoad?: () => void;\r\n  onVideoError?: (error: Event) => void;\r\n  sources?: Array<{ src: string; type: string }>;\r\n  poster?: string;\r\n}\r\n\r\nexport function VideoText({\r\n  src,\r\n  children,\r\n  className = \"\",\r\n  autoPlay = true,\r\n  muted = true,\r\n  loop = true,\r\n  preload = \"auto\",\r\n  fontSize = 18,\r\n  fontWeight = \"bold\",\r\n  textAnchor = \"middle\",\r\n  dominantBaseline = \"middle\",\r\n  fontFamily = \"sans-serif\",\r\n  as: Component = \"div\",\r\n  letterSpacing,\r\n  textTransform = \"none\",\r\n  onVideoLoad,\r\n  onVideoError,\r\n  sources = [],\r\n  poster,\r\n}: VideoTextProps) {\r\n  const [isVideoLoaded, setIsVideoLoaded] = useState(false);\r\n  const videoRef = useRef<HTMLVideoElement>(null);\r\n  \r\n  // Memoize content conversion to avoid unnecessary recalculations\r\n  const content = useMemo(() => {\r\n    return React.Children.toArray(children)\r\n      .map(child => {\r\n        if (typeof child === 'string' || typeof child === 'number') {\r\n          return child;\r\n        }\r\n        return '';\r\n      })\r\n      .join('');\r\n  }, [children]);\r\n\r\n  // Memoize SVG generation\r\n  const svgMask = useMemo(() => {\r\n    const responsiveFontSize =\r\n      typeof fontSize === \"number\" ? `${fontSize}vw` : fontSize;\r\n    \r\n    // Escape special characters in content for SVG\r\n    const escapedContent = content\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/\"/g, '&quot;')\r\n      .replace(/'/g, '&#39;');\r\n    \r\n    const svgString = `\r\n      <svg xmlns='http://www.w3.org/2000/svg' width='100%' height='100%'>\r\n        <text \r\n          x='50%' \r\n          y='50%' \r\n          font-size='${responsiveFontSize}' \r\n          font-weight='${fontWeight}' \r\n          text-anchor='${textAnchor}' \r\n          dominant-baseline='${dominantBaseline}' \r\n          font-family='${fontFamily}'\r\n          ${letterSpacing ? `letter-spacing='${letterSpacing}'` : ''}\r\n          ${textTransform !== 'none' ? `text-transform='${textTransform}'` : ''}\r\n        >\r\n          ${escapedContent}\r\n        </text>\r\n      </svg>\r\n    `;\r\n    \r\n    return `url(\"data:image/svg+xml,${encodeURIComponent(svgString.trim())}\")`;\r\n  }, [content, fontSize, fontWeight, textAnchor, dominantBaseline, fontFamily, letterSpacing, textTransform]);\r\n\r\n  // Handle video load\r\n  const handleVideoLoad = useCallback(() => {\r\n    setIsVideoLoaded(true);\r\n    onVideoLoad?.();\r\n  }, [onVideoLoad]);\r\n\r\n  // Handle video error\r\n  const handleVideoError = useCallback((event: React.SyntheticEvent<HTMLVideoElement, Event>) => {\r\n    console.error('Video failed to load:', event);\r\n    onVideoError?.(event.nativeEvent);\r\n  }, [onVideoError]);\r\n\r\n  // Attempt to play video on mount (for browsers that block autoplay)\r\n  useEffect(() => {\r\n    if (videoRef.current && autoPlay) {\r\n      videoRef.current.play().catch(error => {\r\n        console.warn('Autoplay was prevented:', error);\r\n      });\r\n    }\r\n  }, [autoPlay]);\r\n\r\n  return (\r\n    <Component className={cn(\"relative w-full h-full overflow-hidden\", className)}>\r\n      {/* Video container with mask */}\r\n      <div\r\n        className={cn(\r\n          \"absolute inset-0 flex items-center justify-center\",\r\n          !isVideoLoaded && \"opacity-0 transition-opacity duration-500\"\r\n        )}\r\n        style={{\r\n          maskImage: svgMask,\r\n          WebkitMaskImage: svgMask,\r\n          maskSize: \"contain\",\r\n          WebkitMaskSize: \"contain\",\r\n          maskRepeat: \"no-repeat\",\r\n          WebkitMaskRepeat: \"no-repeat\",\r\n          maskPosition: \"center\",\r\n          WebkitMaskPosition: \"center\",\r\n          opacity: isVideoLoaded ? 1 : 0,\r\n          transition: \"opacity 0.5s ease-in-out\",\r\n        }}\r\n      >\r\n        <video\r\n          ref={videoRef}\r\n          className=\"w-full h-full object-cover\"\r\n          autoPlay={autoPlay}\r\n          muted={muted}\r\n          loop={loop}\r\n          preload={preload}\r\n          playsInline\r\n          poster={poster}\r\n          onLoadedData={handleVideoLoad}\r\n          onError={handleVideoError}\r\n        >\r\n          {/* Primary source */}\r\n          <source src={src} type=\"video/mp4\" />\r\n          \r\n          {/* Alternative sources */}\r\n          {sources.map((source, index) => (\r\n            <source key={index} src={source.src} type={source.type} />\r\n          ))}\r\n          \r\n          Your browser does not support the video tag.\r\n        </video>\r\n      </div>\r\n\r\n      {/* Loading state (optional) */}\r\n      {!isVideoLoaded && (\r\n        <div className=\"absolute inset-0 flex items-center justify-center\">\r\n          <div className=\"text-white text-opacity-50\">Loading...</div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Screen reader text */}\r\n      <span className=\"sr-only\">{content}</span>\r\n    </Component>\r\n  );\r\n}\r\n\r\n// -----------------------------------------------------------------------------\r\n// Enhanced Example App\r\n// -----------------------------------------------------------------------------\r\nexport default function Videotext() {\r\n  return (\r\n    <main className=\"text-white flex items-center justify-center w-screen h-[400px] overflow-hidden\">\r\n      <div className=\"w-full h-1/2 max-w-4xl\">\r\n        <VideoText \r\n          src=\"https://ls29t3z55w.ufs.sh/f/JEKFIJDsOBct0vrmLYJRG8BKHmvZQkWJ9ElIVcNfzPg63Mbo\"\r\n          fontFamily=\"Helvetica, Arial, sans-serif\"\r\n          fontSize={20}\r\n          letterSpacing=\"0.05em\"\r\n          textTransform=\"uppercase\"\r\n          sources={[\r\n            { src: \"fallback.webm\", type: \"video/webm\" },\r\n            { src: \"fallback.ogv\", type: \"video/ogg\" }\r\n          ]}\r\n          onVideoLoad={() => console.log('Video loaded successfully')}\r\n          onVideoError={(error) => console.error('Video error:', error)}\r\n        >\r\n          Sera UI\r\n        </VideoText>\r\n      </div>\r\n    </main>\r\n  );\r\n}",
      "type": "registry:ui"
    }
  ]
}