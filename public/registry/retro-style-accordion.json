{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "retro-style-accordion",
  "title": "Retro Style Accordion",
  "description": "A Retro style accordion component.",
  "author": "Nazmul Hossain",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "retro-style-accordion.tsx",
      "content": "use client;\n\nimport React, {\n  useState,\n  useContext,\n  createContext,\n  forwardRef,\n  useId,\n} from \"react\";\n\n\ntype ClassValue = string | number | boolean | undefined | null | { [key: string]: boolean } | ClassValue[];\n\nconst cn = (...args: ClassValue[]): string =>\n  args\n    .flatMap((arg) => {\n      if (!arg) return [];\n      if (typeof arg === \"string\") return [arg];\n      if (typeof arg === \"number\") return [String(arg)];\n      if (Array.isArray(arg)) return arg.filter(Boolean);\n      if (typeof arg === \"object\")\n        return Object.entries(arg)\n          .filter(([, v]) => Boolean(v))\n          .map(([k]) => k);\n      return [];\n    })\n    .join(\" \");\n\n\ntype AccordionContextType = {\n  openValue: string | null;\n  setOpenValue: (value: string) => void;\n};\n\nconst AccordionContext = createContext<AccordionContextType | null>(null);\n\nconst useAccordion = () => {\n  const ctx = useContext(AccordionContext);\n  if (!ctx) throw new Error(\"useAccordion must be used within <Accordion>\");\n  return ctx;\n};\n\n\n// Item\nconst ItemContext = createContext<ItemContextType | null>(null);\nconst useItem = () => {\n  const ctx = useContext(ItemContext);\n  if (!ctx) throw new Error(\"useItem must be used within <AccordionItem>\");\n  return ctx;\n};\n\n\n// Container\nconst Accordion = forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { defaultValue?: string | null }\n>(({ className, children, defaultValue = null, ...props }, ref) => {\n  const [openValue, setOpen] = useState<string | null>(defaultValue);\n\n  const setOpenValue = (value: string) => {\n    setOpen((prev) => (prev === value ? null : value));\n  };\n\n  return (\n    <AccordionContext.Provider value={{ openValue, setOpenValue }}>\n      <div\n        ref={ref}\n        className={cn(\"w-full max-w-lg mx-auto space-y-4\", className)}\n        {...props}\n      >\n        {children}\n      </div>\n    </AccordionContext.Provider>\n  );\n});\nAccordion.displayName = \"Accordion\";\n\n// Item\nconst AccordionItem = forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { value: string }\n>(({ className, value, children, ...props }, ref) => {\n  const uid = useId();\n  const triggerId = `${uid}-trigger`;\n  const contentId = `${uid}-content`;\n\n  return (\n    <ItemContext.Provider value={{ value, triggerId, contentId }}>\n      <div\n        ref={ref}\n        className={cn(\n          \"border-2 border-black bg-white shadow-[4px_4px_0px_0px_#000000] transition-all duration-200 dark:bg-black dark:border-white dark:shadow-[4px_4px_0px_0px_#FFFFFF]",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    </ItemContext.Provider>\n  );\n});\nAccordionItem.displayName = \"AccordionItem\";\n\nconst AccordionTrigger = forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement>\n>(({ className, children, ...props }, ref) => {\n  const { openValue, setOpenValue } = useAccordion();\n  const { value, triggerId, contentId } = useItem();\n  const isOpen = openValue === value;\n\n  return (\n    <button\n      ref={ref}\n      id={triggerId}\n      aria-controls={contentId}\n      aria-expanded={isOpen}\n      type=\"button\"\n      onClick={() => setOpenValue(value)}\n      className={cn(\n        \"flex w-full items-center justify-between p-4 font-bold text-lg bg-[#00ff84] text-black cursor-pointer hover:bg-green-400 transition-colors\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronIcon isOpen={isOpen} />\n    </button>\n  );\n});\nAccordionTrigger.displayName = \"AccordionTrigger\";\n\nconst AccordionContent = forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => {\n  const { openValue } = useAccordion();\n  const { value, triggerId, contentId } = useItem();\n  const isOpen = openValue === value;\n\n  return (\n    <div\n      ref={ref}\n      id={contentId}\n      role=\"region\"\n      aria-labelledby={triggerId}\n      className={cn(\n        \"grid overflow-hidden transition-[grid-template-rows] duration-200 ease-in-out motion-reduce:transition-none\",\n        isOpen ? \"grid-rows-[1fr]\" : \"grid-rows-[0fr]\";\n        className\n      )}\n      {...props}\n    >\n      <div className=\"overflow-hidden\">\n        <div className=\"p-4 border-t-2 border-black text-gray-700 dark:border-white dark:text-gray-300\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n});\nAccordionContent.displayName = \"AccordionContent\";\n\n// Chevron\nconst ChevronIcon = ({ isOpen }: { isOpen: boolean }) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"3\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n    className={cn(\"transform transition-transform duration-200 ease-in-out\", {\n      \"rotate-180\": isOpen,\n    })}
  >\n    <polyline points=\"6 9 12 15 18 9\"></polyline>\n  </svg>\n);\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };",
      "type": "registry:ui"
    }
  ]
}