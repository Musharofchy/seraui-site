{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "retro-style-accordion",
  "title": "Retro Style Accordion",
  "description": "A minimalistic retro style-accordion component designed with React and Tailwind CSS.",
  "author": "Reche Soares",
  "type": "registry:ui",
  "dependencies": [],
  "devDependencies": [],
  "registryDependencies": [],
  "cssVars": {
    "dark": {},
    "light": {}
  },
  "files": [
    {
      "path": "retro-style-accordion.tsx",
      "content": "\"use client\";\r\n\r\nimport React, {\r\n  useState,\r\n  useContext,\r\n  createContext,\r\n  forwardRef,\r\n  useId,\r\n} from \"react\";\r\n\r\n\r\ntype ClassValue = string | number | boolean | undefined | null | { [key: string]: boolean } | ClassValue[];\r\n\r\nconst cn = (...args: ClassValue[]): string =>\r\n  args\r\n    .flatMap((arg) => {\r\n      if (!arg) return [];\r\n      if (typeof arg === \"string\") return [arg];\r\n      if (typeof arg === \"number\") return [String(arg)];\r\n      if (Array.isArray(arg)) return arg.filter(Boolean);\r\n      if (typeof arg === \"object\")\r\n        return Object.entries(arg)\r\n          .filter(([, v]) => Boolean(v))\r\n          .map(([k]) => k);\r\n      return [];\r\n    })\r\n    .join(\" \");\r\n\r\n\r\ntype AccordionContextType = {\r\n  openValue: string | null;\r\n  setOpenValue: (value: string) => void;\r\n};\r\n\r\nconst AccordionContext = createContext<AccordionContextType | null>(null);\r\n\r\nconst useAccordion = () => {\r\n  const ctx = useContext(AccordionContext);\r\n  if (!ctx) throw new Error(\"useAccordion must be used within <Accordion>\");\r\n  return ctx;\r\n};\r\n\r\ntype ItemContextType = {\r\n  value: string;\r\n  triggerId: string;\r\n  contentId: string;\r\n};\r\nconst ItemContext = createContext<ItemContextType | null>(null);\r\nconst useItem = () => {\r\n  const ctx = useContext(ItemContext);\r\n  if (!ctx) throw new Error(\"useItem must be used within <AccordionItem>\");\r\n  return ctx;\r\n};\r\n\r\n\r\n// Container\r\nconst Accordion = forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement> & { defaultValue?: string | null }\r\n>(({ className, children, defaultValue = null, ...props }, ref) => {\r\n  const [openValue, setOpen] = useState<string | null>(defaultValue);\r\n\r\n  const setOpenValue = (value: string) => {\r\n    setOpen((prev) => (prev === value ? null : value));\r\n  };\r\n\r\n  return (\r\n    <AccordionContext.Provider value={{ openValue, setOpenValue }}>\r\n      <div\r\n        ref={ref}\r\n        className={cn(\"w-full max-w-lg mx-auto space-y-4\", className)}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </div>\r\n    </AccordionContext.Provider>\r\n  );\r\n});\r\nAccordion.displayName = \"Accordion\";\r\n\r\n// Item\r\nconst AccordionItem = forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement> & { value: string }\r\n>(({ className, value, children, ...props }, ref) => {\r\n  const uid = useId();\r\n  const triggerId = `${uid}-trigger`;\r\n  const contentId = `${uid}-content`;\r\n\r\n  return (\r\n    <ItemContext.Provider value={{ value, triggerId, contentId }}>\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          \"border-2 border-black bg-white shadow-[4px_4px_0px_0px_#000000] transition-all duration-200 dark:bg-black dark:border-white dark:shadow-[4px_4px_0px_0px_#FFFFFF]\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {children}\r\n      </div>\r\n    </ItemContext.Provider>\r\n  );\r\n});\r\nAccordionItem.displayName = \"AccordionItem\";\r\n\r\nconst AccordionTrigger = forwardRef<\r\n  HTMLButtonElement,\r\n  React.ButtonHTMLAttributes<HTMLButtonElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { openValue, setOpenValue } = useAccordion();\r\n  const { value, triggerId, contentId } = useItem();\r\n  const isOpen = openValue === value;\r\n\r\n  return (\r\n    <button\r\n      ref={ref}\r\n      id={triggerId}\r\n      aria-controls={contentId}\r\n      aria-expanded={isOpen}\r\n      type=\"button\"\r\n      onClick={() => setOpenValue(value)}\r\n      className={cn(\r\n        \"flex w-full items-center justify-between p-4 font-bold text-lg bg-[#00ff84] text-black cursor-pointer hover:bg-green-400 transition-colors\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <ChevronIcon isOpen={isOpen} />\r\n    </button>\r\n  );\r\n});\r\nAccordionTrigger.displayName = \"AccordionTrigger\";\r\n\r\nconst AccordionContent = forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { openValue } = useAccordion();\r\n  const { value, triggerId, contentId } = useItem();\r\n  const isOpen = openValue === value;\r\n\r\n  return (\r\n    <div\r\n      ref={ref}\r\n      id={contentId}\r\n      role=\"region\"\r\n      aria-labelledby={triggerId}\r\n      className={cn(\r\n        \"grid overflow-hidden transition-[grid-template-rows] duration-200 ease-in-out motion-reduce:transition-none\",\r\n        isOpen ? \"grid-rows-[1fr]\" : \"grid-rows-[0fr]\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <div className=\"overflow-hidden\">\r\n        <div className=\"p-4 border-t-2 border-black text-gray-700 dark:border-white dark:text-gray-300\">\r\n          {children}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\nAccordionContent.displayName = \"AccordionContent\";\r\n\r\n// Chevron\r\nconst ChevronIcon = ({ isOpen }: { isOpen: boolean }) => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"3\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n    className={cn(\"transform transition-transform duration-200 ease-in-out\", {\r\n      \"rotate-180\": isOpen,\r\n    })}\r\n  >\r\n    <polyline points=\"6 9 12 15 18 9\"></polyline>\r\n  </svg>\r\n);\r\n\r\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent };",
      "type": "registry:ui"
    },
    {
      "path": "retro-style-accordion-demo.tsx",
      "content": "\r\nimport { Accordion, AccordionItem, AccordionTrigger, AccordionContent } from \"./retro-style-accordion\"\r\n\r\n\r\nconst RetroStyleAccordionDemo = () => {\r\n  const accordionItems = [\r\n    {\r\n      value: \"item-1\",\r\n      title: \"Is this styled like the button?\",\r\n      content:\r\n        \"Yes! It uses the same bright green, black borders, and hard shadow to create a consistent look and feel. The hover and press effects are adapted for the accordion trigger.\",\r\n    },\r\n    {\r\n      value: \"item-2\",\r\n      title: \"Is it accessible?\",\r\n      content:\r\n        \"It's built with accessibility in mind. It uses button elements for triggers and ARIA attributes like aria-expanded and aria-controls.\",\r\n    },\r\n    {\r\n      value: \"item-3\",\r\n      title: \"Can I customize the content?\",\r\n      content:\r\n        \"Absolutely. You can put any React components or JSX inside the AccordionContent.\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"w-full flex items-center justify-center p-4 font-sans\">\r\n      <Accordion defaultValue=\"item-1\">\r\n        {accordionItems.map((item) => (\r\n          <AccordionItem key={item.value} value={item.value}>\r\n            <AccordionTrigger>{item.title}</AccordionTrigger>\r\n            <AccordionContent>{item.content}</AccordionContent>\r\n          </AccordionItem>\r\n        ))}\r\n      </Accordion>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RetroStyleAccordionDemo;",
      "type": "registry:ui"
    }
  ]
}