{
    "$schema": "https://ui.shadcn.com/schema/registry-item.json",
    "name": "strongPassword",
    "title": "strongPassword",
    "description": "A strongPassword component designed with React and Tailwind CSS.",
    "author": "Zane Whitaker",
    "type": "registry:ui",
    "dependencies": [],
    "devDependencies": [],
    "registryDependencies": [],
    "cssVars": {
      "dark": {},
      "light": {}
    },
    "files": [
      {
        "path": "strongPassword.tsx",
        "content": "'use client'\nimport React, { useState, useEffect } from 'react';\n\n// SVG Icon for visibility ON\nconst EyeIcon = ({ className }: { className?: string }) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\n    <path d=\"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z\" />\n    <circle cx=\"12\" cy=\"12\" r=\"3\" />\n  </svg>\n);\n\n// SVG Icon for visibility OFF\nconst EyeOffIcon = ({ className }: { className?: string }) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\n    <path d=\"M9.88 9.88a3 3 0 1 0 4.24 4.24\" />\n    <path d=\"M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68\" />\n    <path d=\"M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61\" />\n    <line x1=\"2\" x2=\"22\" y1=\"2\" y2=\"22\" />\n  </svg>\n);\n\n// SVG Icon for validation check (valid)\nconst CheckIcon = ({ className }: { className?: string }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"3\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\n        <polyline points=\"20 6 9 17 4 12\"></polyline>\n    </svg>\n);\n\n// SVG Icon for validation cross (invalid)\nconst XIcon = ({ className }: { className?: string }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"3\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className}>\n        <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n        <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n    </svg>\n);\n\n\n// Validation criteria configuration\nconst validationRules = [\n  { id: 'length', text: 'At least 8 characters', regex: /.{8,}/ },\n  { id: 'number', text: 'At least 1 number', regex: /\\d/ },\n  { id: 'lowercase', text: 'At least 1 lowercase letter', regex: /[a-z]/ },\n  { id: 'uppercase', text: 'At least 1 uppercase letter', regex: /[A-Z]/ },\n  { id: 'special', text: 'At least 1 special character', regex: /[^A-Za-z0-9]/ },\n];\n\n// A single validation item component\nconst ValidationItem = ({ isValid, text }: { isValid: boolean, text: string }) => (\n  <li className={`flex items-center transition-colors duration-300 ${isValid ? 'text-green-500 dark:text-green-400' : 'text-gray-500 dark:text-gray-400'}`}>\n    {isValid ? <CheckIcon className=\"h-4 w-4 mr-2\" /> : <XIcon className=\"h-4 w-4 mr-2\" />}\n    <span>{text}</span>\n  </li>\n);\n\n\n// The main Password Input Component with Validation\nconst StrongPasswordInput = () => {\n  const [showPassword, setShowPassword] = useState(false);\n  const [password, setPassword] = useState('');\n  const [validationState, setValidationState] = useState({\n    length: false,\n    number: false,\n    lowercase: false,\n    uppercase: false,\n    special: false,\n  });\n  const [isPristine, setIsPristine] = useState(true);\n\n\n  // Effect to validate password whenever it changes\n  useEffect(() => {\n    // If the field is empty, don't show errors yet.\n    if (password === '') {\n        setIsPristine(true);\n        // Reset validation state\n        setValidationState({\n            length: false, number: false, lowercase: false, uppercase: false, special: false\n        });\n        return;\n    }\n\n    setIsPristine(false);\n\n    // Update validation state based on rules\n    const newValidationState = {\n      length: validationRules.find(r => r.id === 'length')!.regex.test(password),\n      number: validationRules.find(r => r.id === 'number')!.regex.test(password),\n      lowercase: validationRules.find(r => r.id === 'lowercase')!.regex.test(password),\n      uppercase: validationRules.find(r => r.id === 'uppercase')!.regex.test(password),\n      special: validationRules.find(r => r.id === 'special')!.regex.test(password),\n    };\n    setValidationState(newValidationState);\n  }, [password]);\n\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <div className=\"w-full max-w-sm font-sans\">\n      <div className=\"mb-6\">\n        <label\n          htmlFor=\"password\"\n          className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\"\n        >\n          Password\n        </label>\n        <div className=\"relative\">\n          <input\n            id=\"password\"\n            type={showPassword ? 'text' : 'password'}\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            placeholder=\"Password\"\n            className=\"w-full bg-gray-50 dark:bg-gray-800 text-gray-900 dark:text-gray-100 placeholder-gray-500 dark:placeholder-gray-400 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors\"\n          />\n          <button\n            type=\"button\"\n            onClick={togglePasswordVisibility}\n            className=\"absolute inset-y-0 right-0 flex items-center pr-4 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 transition-colors\"\n            aria-label=\"Toggle password visibility\"\n          >\n            {showPassword ? (\n              <EyeOffIcon className=\"h-5 w-5\" />\n            ) : (\n              <EyeIcon className=\"h-5 w-5\" />\n            )}\n          </button>\n        </div>\n      </div>\n\n      {/* Validation Criteria Section */}\n      <div className=\"mt-4\">\n        <div className=\"flex justify-between items-center mb-2\">\n            <h3 className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Must contain:</h3>\n            {isPristine && <p className=\"text-sm text-gray-500 dark:text-gray-400\">Enter a password</p>}\n        </div>\n        <ul className=\"space-y-2\">\n            {validationRules.map(rule => (\n                <ValidationItem\n                    key={rule.id}\n                    isValid={validationState[rule.id as keyof typeof validationState]}\n                    text={rule.text}\n                />\n            ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default StrongPasswordInput;\n",
        "type": "registry:ui"
      }
    ]
  }
  